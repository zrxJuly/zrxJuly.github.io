<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zrxJuly&#39;s Blog</title>
  
  <subtitle>成长中的产品媛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zrxjuly.github.io/"/>
  <updated>2020-02-25T12:42:28.416Z</updated>
  <id>https://zrxjuly.github.io/</id>
  
  <author>
    <name>阿媛Erin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何坚持完成自己的目标和计划？</title>
    <link href="https://zrxjuly.github.io/2020-02/how-to-accomplish-your-plan/"/>
    <id>https://zrxjuly.github.io/2020-02/how-to-accomplish-your-plan/</id>
    <published>2020-02-23T15:10:54.000Z</published>
    <updated>2020-02-25T12:42:28.416Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020-02/how-to-accomplish-your-plan/blur-close-up-composition-craft-281962.jpg" alt="fighting"> </p><p align="right"><font color="#555">自己的航道必须自己掌舵，<br>即便风雨交加，也要坚持不懈。</font></p><h2 id="认清自己，摆脱问题"><a href="#认清自己，摆脱问题" class="headerlink" title="认清自己，摆脱问题"></a><center><b><font size="3">认清自己，摆脱问题</font></b></center></h2><p>你是否一直坚持着一种仪式感：每次新年前后都要为自己新的一年制定一系列的目标计划，踌躇满志。</p><p>你是否不满足于现状，抱怨所处的环境或身边的人在阻碍你的进步，想要努力改变，提升自己。于是你辞掉让你头疼的工作，或者搬去一个新的城市，期待着一个新的环境能够让你摆脱当下的不快乐，重新开始新的生活。</p><p>但通常情况是：</p><p>当你年底进行复盘的时候，看着自己年初制定的目标计划，实现的却没有几个；</p><p>你做出了巨大改变，处在一个全新的环境中，但是依旧面临和以前一样的问题，纵然身处的环境变了，但是你的行为和生活习惯却没变。</p><p>那是因为你根本没有摆脱原来的自己。</p><p>或许对你来说，新的时间节点、新的环境、新的工作意味着新的开始，但若你无法逃离原来的缺点、坏习惯以及处理事情的方式，不管你制定什么目标计划，不管你去到哪里，这些问题会一直跟随着你，除非你自己试着去克服它们，改变它们。</p><p>如果你自律性很强，从没遇到过上述类似问题，能够完美的实现自己预定的目标，这么优秀的你，我真的非常羡慕、佩服。但假如你也和我一样，没有很强的自律性，没有很好的工作、学习、生活习惯，完美的计划实现起来往往不尽如人意，那你就需要认清自己，摆脱现有的问题。如果不从自身情况出发，找出问题所在，你的目标计划往往很难完美实现。</p><p><img src="/2020-02/how-to-accomplish-your-plan/achievement-confident-free-freedom-6945.jpg" alt="fighting"> </p><a id="more"></a><h2 id="Get-Start-Now！"><a href="#Get-Start-Now！" class="headerlink" title="Get Start Now！"></a><center><b><font size="3">Get Start Now！</font></b></center></h2><p>没错，就是<strong>从现在开始着手去做</strong>。</p><p>比如，如果现在你身旁有一本书，不妨现在就拿来读一读。我知道，一开始就让你专心会很难，或许会有些痛苦，因为你不习惯，但是请你静下心来坚持读二十分钟，你会发现，阅读带给你的不仅仅是书中的知识，更是你能够坚持做一件事产生的自信。因为你内心渴望优秀，所以也请你坚持下去。</p><p>有时往往你的目标并不难实现，但是每次当你开始为你的目标而努力的时候，内心仿佛总有一个声音在告诉你：</p><blockquote><p>不着急，还有的是时间呢。<br>算了，今天太晚了，等明天再做吧！<br>这件事太难了！等抽空专门再做吧。<br>……</p></blockquote><p>就这样，由于你的“完美借口”，将事情一拖再拖，你的完美计划最终成功泡汤。于是，你又重新开始制定新的计划，然后像上面那样循环往复……</p><p>因此，<strong>积极性的心理暗示很重要</strong>。尤其当你身体懒惰时，经常给自己积极性的心理暗示，让自己内心深处督促自己。</p><p>所以，从现在开始去做吧，<strong>远离那些对你的成长毫无帮助的事物，哪怕每天十分钟，只要用心坚持，定能有所收获。</strong></p><p><img src="/2020-02/how-to-accomplish-your-plan/fashion-woman-notebook-pen-34072.jpg" alt="fighting"> </p><h2 id="准确合理的制定并执行计划"><a href="#准确合理的制定并执行计划" class="headerlink" title="准确合理的制定并执行计划"></a><center><b><font size="3">准确合理的制定并执行计划</font></b></center></h2><p><strong>制定一个时长为一周的目标，而不是一个月甚至一年的目标。</strong></p><p>如果你还没有养成很好的习惯，如果你还不能每天坚持去做自己计划的事情，那么请不要把你的计划周期制定的很长，<strong>计划不要过于复杂，目标不要定的太高，要简单明确，切实可行。</strong></p><p><strong>以周、日为单位，尽量不要以年。</strong>比如：</p><p>把<code>“计划今年看完10本书”</code>改成<code>“计划每天看完10页书”</code>  <code>“今天要看完10页书”</code>；</p><p>把<code>“计划每天记20个单词”</code>改成<code>“今天要记20个单词”</code>。</p><p>将时间长远的目标，分割确定为每周、每天、甚至今天要完成的小目标，让你的每一天都充实起来。<br>执行计划的过程，也是<strong>养成你的良好习惯</strong>的过程，要坚持。<br>如果你的短期计划成功了的话，那么接着进行下一阶段目标。<br>如果没有成功，请把你的标准降低一点儿吧。<br>so，你的计划制定的合理吗？</p><p><img src="/2020-02/how-to-accomplish-your-plan/jumpshot-photography-of-woman-in-white-and-yellow-dress-near-884977.jpg" alt="fighting"> </p><h2 id="记录成长，总结失败"><a href="#记录成长，总结失败" class="headerlink" title="记录成长，总结失败"></a><center><b><font size="3">记录成长，总结失败</font></b></center></h2><p><b>定期复盘，记录你所做的事情，总结得失。</b></p><p>如果可以的话，每天进行复盘，写写日记，记下你这一天有意思的事情，你的收获，你犯过的错误，时刻反省自己，正所谓<strong>“吾日三省吾身”</strong>。若时间紧张，每周或者每月也应该要复盘一次，要坚持。</p><p>正如孔子对其弟子所言：<strong>“不迁怒，不贰过”</strong>。既不会把愤怒发泄在别人身上，自己也不会犯同样的错误。</p><p>共勉。</p><p><img src="/2020-02/how-to-accomplish-your-plan/close-up-photo-of-white-and-black-journal-771322.jpg" alt="fighting"> </p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a><center><b><font size="3">写在最后</font></b></center></h2><p><b>没有任何能够让你成长的事情是容易的。</b><br>分享一段尼克·胡哲的名言：</p><blockquote><p><strong>“当你打算放弃梦想时，告诉自己再多撑一天、一个星期、一个月，再多撑一年吧。你会发现，拒绝退场的结果令人惊讶。”</strong></p></blockquote><p>既然2020不能重启，那就努力改变、提升自己吧。</p><p>“愿你的身后总有力量，愿你成为自己的太阳”。</p><p>这一年，愿你努力成长，做你自己的英雄。</p><center><font color="#cdced0" size="1">- End -</font></center><center><b>这世界独一无二的你</b></center><center><font color="#555" size="2">愿有前程可奔赴，亦有岁月可回首</font></center><p><img src="/2020-02/how-to-accomplish-your-plan/proud_of_yourself.jpg" alt="fighting"> </p><center><font color="#cdced0" size="0.5">微信扫描二维码，关注我的公众号</font></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020-02/how-to-accomplish-your-plan/blur-close-up-composition-craft-281962.jpg&quot; alt=&quot;fighting&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;font color=&quot;#555&quot;&gt;自己的航道必须自己掌舵，&lt;br&gt;即便风雨交加，也要坚持不懈。&lt;/font&gt;&lt;/p&gt;

&lt;h2 id=&quot;认清自己，摆脱问题&quot;&gt;&lt;a href=&quot;#认清自己，摆脱问题&quot; class=&quot;headerlink&quot; title=&quot;认清自己，摆脱问题&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;b&gt;&lt;font size=&quot;3&quot;&gt;认清自己，摆脱问题&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&lt;/h2&gt;&lt;p&gt;你是否一直坚持着一种仪式感：每次新年前后都要为自己新的一年制定一系列的目标计划，踌躇满志。&lt;/p&gt;
&lt;p&gt;你是否不满足于现状，抱怨所处的环境或身边的人在阻碍你的进步，想要努力改变，提升自己。于是你辞掉让你头疼的工作，或者搬去一个新的城市，期待着一个新的环境能够让你摆脱当下的不快乐，重新开始新的生活。&lt;/p&gt;
&lt;p&gt;但通常情况是：&lt;/p&gt;
&lt;p&gt;当你年底进行复盘的时候，看着自己年初制定的目标计划，实现的却没有几个；&lt;/p&gt;
&lt;p&gt;你做出了巨大改变，处在一个全新的环境中，但是依旧面临和以前一样的问题，纵然身处的环境变了，但是你的行为和生活习惯却没变。&lt;/p&gt;
&lt;p&gt;那是因为你根本没有摆脱原来的自己。&lt;/p&gt;
&lt;p&gt;或许对你来说，新的时间节点、新的环境、新的工作意味着新的开始，但若你无法逃离原来的缺点、坏习惯以及处理事情的方式，不管你制定什么目标计划，不管你去到哪里，这些问题会一直跟随着你，除非你自己试着去克服它们，改变它们。&lt;/p&gt;
&lt;p&gt;如果你自律性很强，从没遇到过上述类似问题，能够完美的实现自己预定的目标，这么优秀的你，我真的非常羡慕、佩服。但假如你也和我一样，没有很强的自律性，没有很好的工作、学习、生活习惯，完美的计划实现起来往往不尽如人意，那你就需要认清自己，摆脱现有的问题。如果不从自身情况出发，找出问题所在，你的目标计划往往很难完美实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020-02/how-to-accomplish-your-plan/achievement-confident-free-freedom-6945.jpg&quot; alt=&quot;fighting&quot;&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="媛思" scheme="https://zrxjuly.github.io/categories/%E5%AA%9B%E6%80%9D/"/>
    
    
      <category term="媛思" scheme="https://zrxjuly.github.io/tags/%E5%AA%9B%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】Centos7搭建测试环境</title>
    <link href="https://zrxjuly.github.io/2019-08/linux-environment-build/"/>
    <id>https://zrxjuly.github.io/2019-08/linux-environment-build/</id>
    <published>2019-08-26T10:16:36.000Z</published>
    <updated>2020-02-23T14:23:09.468Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019-08/linux-environment-build/linux-environment-build-bg.jpg" alt="linux-environment-build"> </p><blockquote><p>摘要</p></blockquote><ul><li>环境安装工具准备</li><li>JDK安装</li><li>tomcat安装</li><li>MySQL安装</li></ul><h2 id="一、环境安装工具准备"><a href="#一、环境安装工具准备" class="headerlink" title="一、环境安装工具准备"></a>一、环境安装工具准备</h2><blockquote><p>Linux系统：centos7</p></blockquote><h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><ol><li>JDK8安装包：jdk-8u131-linux-x64.rpm</li><li>Tomcat8.5安装包：apache-tomcat-8.5.41.tar.gz</li><li>MySQL5.6安装包：mysql-5.6.45-linux-glibc2.12-x86_64.tar.gz</li></ol><h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>可从官网下载。<br>已把安装工具存于百度网盘：<br>&emsp;&emsp;链接：<a href="https://pan.baidu.com/s/1ts1vRhtzKeMmP9VlnDi4gg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ts1vRhtzKeMmP9VlnDi4gg</a><br>&emsp;&emsp;提取码：2nom </p><h3 id="工具上传"><a href="#工具上传" class="headerlink" title="工具上传"></a>工具上传</h3><p>如何将安装包上传到Linux服务器上？<br>两个工具：WinSCP和SecureCRT（of course,其他的也可以滴)</p><a id="more"></a><h2 id="二、JDK安装"><a href="#二、JDK安装" class="headerlink" title="二、JDK安装"></a>二、JDK安装</h2><h3 id="JDK安装包存放位置"><a href="#JDK安装包存放位置" class="headerlink" title="-JDK安装包存放位置"></a>-JDK安装包存放位置</h3><p>&emsp;&emsp;建议将安装包存放到 <code>/usr/local/</code> 目录下。[不要放在 <code>/home</code> 路径下，容易涉及到不同用户的访问权限]。<br>&emsp;&emsp;我的存放到了 <code>/usr/local/tools/</code> 下，安装工具都放到了这里。</p><h3 id="执行安装命令"><a href="#执行安装命令" class="headerlink" title="-执行安装命令"></a>-执行安装命令</h3><p>进入到 <code>/usr/local/tools/</code> 下，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jdk-8u131-linux-x64.rpm</span><br></pre></td></tr></table></figure><p><img src="/2019-08/linux-environment-build/step1.png" alt="linux-environment-build"> </p><h3 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="-检查是否安装成功"></a>-检查是否安装成功</h3><p>&emsp;&emsp;安装完成后，输入 <code>java -version</code> 检查是否安装成功。出现java的版本信息，即安装成功：<br><img src="/2019-08/linux-environment-build/step2.png" alt="linux-environment-build"> </p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="-配置环境变量"></a>-配置环境变量</h3><h4 id="查看JDK安装路径"><a href="#查看JDK安装路径" class="headerlink" title="查看JDK安装路径"></a>查看JDK安装路径</h4><p>配置环境变量前，我们需要知道JDK的安装路径。<br>如下图，依次按照红框内命令执行：<br><img src="/2019-08/linux-environment-build/step3.png" alt="linux-environment-build"> </p><p>图上最后划红线的即安装路径。</p><h4 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>编辑 <code>/etc/profile</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>[输入i，进行编辑]<br>复制如下内容，粘贴到文件末尾：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_131/</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><p>[Esc退出编辑，:wq 保存退出]。</p><h4 id="重新加载环境变量使配置生效"><a href="#重新加载环境变量使配置生效" class="headerlink" title="重新加载环境变量使配置生效"></a>重新加载环境变量使配置生效</h4><p>输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="三、tomcat安装"><a href="#三、tomcat安装" class="headerlink" title="三、tomcat安装"></a>三、tomcat安装</h2><h3 id="解压Tomcat安装包"><a href="#解压Tomcat安装包" class="headerlink" title="-解压Tomcat安装包"></a>-解压Tomcat安装包</h3><p>进入到 <code>/usr/local/tools/</code> 下，执行命令解压Tomcat安装包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.41.tar.gz</span><br></pre></td></tr></table></figure><h3 id="移动并重新命名文件夹（非必须步骤）"><a href="#移动并重新命名文件夹（非必须步骤）" class="headerlink" title="-移动并重新命名文件夹（非必须步骤）"></a>-移动并重新命名文件夹（非必须步骤）</h3><p>我这里将解压后的Tomcat移动到了 <code>/usr/local</code> 下，并重新命名文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-tomcat-8.5.41 /usr/local/tomcat8-80</span><br></pre></td></tr></table></figure><h3 id="修改Tomcat端口号（非必须步骤）"><a href="#修改Tomcat端口号（非必须步骤）" class="headerlink" title="-修改Tomcat端口号（非必须步骤）"></a>-修改Tomcat端口号（非必须步骤）</h3><p>进入conf，编辑server.xml文件，可修改端口号.</p><h3 id="Tomcat内多余文件-夹-的删除（非必须步骤）"><a href="#Tomcat内多余文件-夹-的删除（非必须步骤）" class="headerlink" title="-Tomcat内多余文件(夹)的删除（非必须步骤）"></a>-Tomcat内多余文件(夹)的删除（非必须步骤）</h3><p>在webapps下，除了ROOT及其目录下的文件(测试启动是否成功，访问用)，其他都可删除，可删除目录如下红框内：<br><img src="/2019-08/linux-environment-build/tomcat-del.png" alt="linux-environment-build"></p><h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="-启动Tomcat"></a>-启动Tomcat</h3><p>到bin目录下，输入<code>./startup.sh</code> ，启动Tomcat，浏览器输入 <code>ip:端口号</code> 访问（确保服务器已开启端口访问权限），若成功访问，则配置成功。</p><h3 id="一个Linux服务器内启动多个Tomcat"><a href="#一个Linux服务器内启动多个Tomcat" class="headerlink" title="- 一个Linux服务器内启动多个Tomcat"></a>- 一个Linux服务器内启动多个Tomcat</h3><p><strong>多个Tomcat安装在同一台操作系统上，需修改Tomcat的配置文件server.xml的三个端口</strong><br><strong>1. 8005端口</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>作用：关闭Tomcat通信接口。该端口负责监听关闭Tomcat的请求。<br>这里我改成了8006<br><img src="/2019-08/linux-environment-build/step4.png" alt="linux-environment-build"></li></ul><p><strong>2. 8080端口</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>作用：建立http连接，例如浏览器访问。<br>这里我改成了8081<br><img src="/2019-08/linux-environment-build/step5.png" alt="linux-environment-build"></li></ul><p><strong>3. 8009端口</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>作用：与其他http服务器通信接口，用于http服务器集合<br>这里我改成了8010<br><img src="/2019-08/linux-environment-build/step6.png" alt="linux-environment-build"></li></ul><p>以上三个端口，各个Tomcat只要不冲突即可。</p><h2 id="四、MySQL安装"><a href="#四、MySQL安装" class="headerlink" title="四、MySQL安装"></a>四、MySQL安装</h2><h3 id="检查是否安装过mysql"><a href="#检查是否安装过mysql" class="headerlink" title="- 检查是否安装过mysql"></a>- 检查是否安装过mysql</h3><p>查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure><p>删除遗留MySQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e 文件名 --nodeps</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="- 解压"></a>- 解压</h3><p>进入MySQL安装包所在目录，执行解压命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysql-5.6.45-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="重命名"><a href="#重命名" class="headerlink" title="- 重命名"></a>- 重命名</h3><p>将解压后的MySQL（移动）重命名为mysql，<code>/usr/local/</code>下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mysql-5.6.45-linux-glibc2.12-x86_64 /usr/local/mysql</span><br></pre></td></tr></table></figure><h3 id="添加用户组和用户"><a href="#添加用户组和用户" class="headerlink" title="- 添加用户组和用户"></a>- 添加用户组和用户</h3><p>命令<code>groups mysql</code>查看用户组，若已添加，会提示已存在，可不用再重复添加。</p><h4 id="添加用户组："><a href="#添加用户组：" class="headerlink" title="添加用户组："></a>添加用户组：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql</span><br></pre></td></tr></table></figure><h4 id="添加用户："><a href="#添加用户：" class="headerlink" title="添加用户："></a>添加用户：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="- 修改配置文件"></a>- 修改配置文件</h3><p>进入到<code>/usr/local/mysql</code>目录下：</p><ul><li><p><strong>复制配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp support-files/my-default.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure></li><li><p><strong>配置my.cnf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure></li></ul><p>文件末尾添加以下配置信息(也可将原文件内容清空，把以下内容复制，注意basedir和datadir要替换成自己mysql的目录位置)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[mysql] </span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld] </span><br><span class="line">#skip-grant-tables</span><br><span class="line">skip-name-resolve </span><br><span class="line">port = 3306 </span><br><span class="line"># 解压后的mysql的位置</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data </span><br><span class="line">max_connections=200 </span><br><span class="line">character-set-server=utf8 </span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">lower_case_table_names=1</span><br><span class="line">max_allowed_packet=16M</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="- 安装"></a>- 安装</h3><p>进入到<code>/usr/local/mysql</code>目录下，执行安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql/</span><br></pre></td></tr></table></figure><p>若执行命令时出现如下报错信息(一般是相应库没有安装，我安装时遇到以下两个错误，从网上查一下解决办法，安装相应库即可)：</p><ol><li><p><code>please install the following Perl modules before executing ./scripts/mysql_install_db:</code><br><img src="/2019-08/linux-environment-build/step7.png" alt="linux-environment-build"><br>解决方法：安装autoconf库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install autoconf</span><br></pre></td></tr></table></figure></li><li><p><code>...error while loading shared libraries: libaio.so.1...</code><br><img src="/2019-08/linux-environment-build/step8.png" alt="linux-environment-build"><br>解决方法：安装libaio库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libaio*</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改目录权限"><a href="#修改目录权限" class="headerlink" title="- 修改目录权限"></a>- 修改目录权限</h3><p>进入到mysql下<br>修改当前目录拥有者为root用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R root:root ./</span><br></pre></td></tr></table></figure><p>修改data目录拥有者为mysql用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql data</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="- 启动"></a>- 启动</h3><h4 id="启动方法一"><a href="#启动方法一" class="headerlink" title="启动方法一"></a>启动方法一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><p>若启动时，出现如下错误：<br><code>Failed to start mysqld.service: Unit not found.</code><br><img src="/2019-08/linux-environment-build/step9.png" alt="linux-environment-build"></p><ul><li><strong>问题原因：</strong></li></ul><p>&emsp;&emsp;由于/etc/init.d/ 不存在mysqld命令。但是有的安装完成后存在，是因为安装包中有相应的命令将mysql.server文件copy到/etc/init.d/下面了。</p><ul><li><strong>解决方法1：</strong></li></ul><p>进入到mysql目录下，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ./support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure><p>再执行以下任何命令，都可成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service mysqld status    # 查看mysql当前启动状态</span><br><span class="line">service mysqld stop      # 停止mysql服务</span><br><span class="line">service mysqld start     # 启动mysql服务</span><br><span class="line">service mysqld restart   # 重启mysql服务</span><br></pre></td></tr></table></figure><ul><li><strong>解决方法2</strong></li></ul><p>【网上的另一种解决方法】<br>第1步 安装mariadb-server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mariadb-server</span><br></pre></td></tr></table></figure><p>第2步 启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb.service</span><br></pre></td></tr></table></figure><p>第3步 添加到开启启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mariadb.service</span><br></pre></td></tr></table></figure><blockquote><p>以前版本的CentOS都是使用MySQL作为数据库的，而从CentOS 7开始启用了MariaDB。<br>相关参考：<a href="https://www.zhihu.com/question/41832866" target="_blank" rel="noopener">CentOS 7为什么放弃了MySQL，而改使用MariaDB？</a></p></blockquote><h4 id="启动方法二"><a href="#启动方法二" class="headerlink" title="启动方法二"></a>启动方法二</h4><p>该启动方法，不存在方法一的问题，mysql目录下执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./support-files/mysql.server start</span><br></pre></td></tr></table></figure><p>如何关闭mysql服务？将上面的命令start改为stop即可，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./support-files/mysql.server stop</span><br></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="- 修改密码"></a>- 修改密码</h3><h4 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h4><p>以root账号登录mysql，默认是没有密码的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h127.0.0.1 -P3306 -uroot -p</span><br></pre></td></tr></table></figure><p>提示输入密码的时候，直接回车即可。</p><p>但当用命令<code>mysql -uroot -p</code>登录时，报错：</p><ul><li><strong>问题描述：</strong><br><code>Can&#39;t connect to local MySQL server through socket &#39;/var/lib/mysql/mysql.sock&#39;</code><br><img src="/2019-08/linux-environment-build/step10.png" alt="linux-environment-build"></li><li><strong>问题原因：</strong></li></ul><p>目标文件mysql.lock找不到。mysql.sock可能会根据实际安装方式的不同，存放在不同的目录下，可能是/var/lib/mysql.sock或/tmp/mysql.sock或其他目录下，我的是在/tmp/mysql.sock下：</p><ul><li><strong>解决方法：</strong></li></ul><p>创建软连接：<code>ln -s 源文件 目标文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /tmp/mysql.sock /var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure><p>然后重新用<code>mysql -uroot -p</code>，登录成功！<br>参考链接：<a href="https://blog.csdn.net/JustinQin/article/details/79209073" target="_blank" rel="noopener">https://blog.csdn.net/JustinQin/article/details/79209073</a></p><h4 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h4><p>root账号登录后，查看mysql账号信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT user,host,password FROM mysql.user;</span><br></pre></td></tr></table></figure><p><img src="/2019-08/linux-environment-build/step11.png" alt="linux-environment-build"><br>上图我们可以看到，所有账号都是没有密码的。<br>修改root登录密码为root：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user set password=password(&apos;root&apos;) where user=&apos;root&apos;;</span><br></pre></td></tr></table></figure><p>如果想设置不同host登录密码不同，可在条件上加上 <code>and host=&#39;&#39;</code>;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user set password=password(&apos;root&apos;) where user=&apos;root&apos; and host=&apos;localhost&apos;;</span><br></pre></td></tr></table></figure><p>修改完后，记得<strong>刷新权限</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="设置远程主机登录"><a href="#设置远程主机登录" class="headerlink" title="- 设置远程主机登录"></a>- 设置远程主机登录</h3><p>若允许root用户只能在特定ip进行远程登录，并具有所有库的操作权限，则需要指定ip：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;特定ip&apos; IDENTIFIED BY &apos;你的登录密码&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>允许root用户在任何地方进行登录，并具有所有库的操作权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;你的登录密码&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>修改完后，记得<strong>刷新权限</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;以上，Linux搭建测试环境步骤就告一段落啦<del>在安装MySQL的时候，遇到了很多问题，不过遇到问题就解决，并及时记录下来，还是学到了很多东西的</del><br>要努力学技术，毕竟技术才是硬道理！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019-08/linux-environment-build/linux-environment-build-bg.jpg&quot; alt=&quot;linux-environment-build&quot;&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;环境安装工具准备&lt;/li&gt;
&lt;li&gt;JDK安装&lt;/li&gt;
&lt;li&gt;tomcat安装&lt;/li&gt;
&lt;li&gt;MySQL安装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一、环境安装工具准备&quot;&gt;&lt;a href=&quot;#一、环境安装工具准备&quot; class=&quot;headerlink&quot; title=&quot;一、环境安装工具准备&quot;&gt;&lt;/a&gt;一、环境安装工具准备&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Linux系统：centos7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装工具&quot;&gt;&lt;a href=&quot;#安装工具&quot; class=&quot;headerlink&quot; title=&quot;安装工具&quot;&gt;&lt;/a&gt;安装工具&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;JDK8安装包：jdk-8u131-linux-x64.rpm&lt;/li&gt;
&lt;li&gt;Tomcat8.5安装包：apache-tomcat-8.5.41.tar.gz&lt;/li&gt;
&lt;li&gt;MySQL5.6安装包：mysql-5.6.45-linux-glibc2.12-x86_64.tar.gz&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;工具下载&quot;&gt;&lt;a href=&quot;#工具下载&quot; class=&quot;headerlink&quot; title=&quot;工具下载&quot;&gt;&lt;/a&gt;工具下载&lt;/h3&gt;&lt;p&gt;可从官网下载。&lt;br&gt;已把安装工具存于百度网盘：&lt;br&gt;&amp;emsp;&amp;emsp;链接：&lt;a href=&quot;https://pan.baidu.com/s/1ts1vRhtzKeMmP9VlnDi4gg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1ts1vRhtzKeMmP9VlnDi4gg&lt;/a&gt;&lt;br&gt;&amp;emsp;&amp;emsp;提取码：2nom &lt;/p&gt;
&lt;h3 id=&quot;工具上传&quot;&gt;&lt;a href=&quot;#工具上传&quot; class=&quot;headerlink&quot; title=&quot;工具上传&quot;&gt;&lt;/a&gt;工具上传&lt;/h3&gt;&lt;p&gt;如何将安装包上传到Linux服务器上？&lt;br&gt;两个工具：WinSCP和SecureCRT（of course,其他的也可以滴)&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zrxjuly.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://zrxjuly.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode之数据结构——数组demo3</title>
    <link href="https://zrxjuly.github.io/2019-04/data-structure-array-plusone/"/>
    <id>https://zrxjuly.github.io/2019-04/data-structure-array-plusone/</id>
    <published>2019-04-09T13:32:50.000Z</published>
    <updated>2020-02-23T14:23:09.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019-04/data-structure-array-plusone/adorable-bench-blurred-background-1767434.jpg" alt="data-structure-array-plusone"> </p><p><strong>代码维护于GitHub：<a href="https://github.com/zrxJuly/data-structure" target="_blank" rel="noopener">https://github.com/zrxJuly/data-structure</a></strong></p><blockquote><p><strong><em>Coding Question:</em></strong><br>Given a non-empty array of digits representing a non-negative integer, plus one to the integer.<br>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.<br>You may assume the integer does not contain any leading zero, except the number 0 itself.</p><p><strong><em>编程题:</em></strong><br>给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加1.<br>最高位存放于数组首位，并且数组中的每个元素只包含一个数字.<br>你可以假设该整数除了整数0之外，不会以0开头.</p></blockquote><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3]</span><br><span class="line">输出：[1,2,4]</span><br><span class="line">解释：输入数组表示数字123.</span><br></pre></td></tr></table></figure><a id="more"></a><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlusOne</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * |-思路分析：逢十进一</span></span><br><span class="line"><span class="comment">     *      从最后一位数组开始向前遍历int数组，</span></span><br><span class="line"><span class="comment">     *      若最后一位数为9，则将该数值赋为0(逢十进一)，然后依次向前同理，</span></span><br><span class="line"><span class="comment">     *      若前一位也为9，则赋为0，再向前遍历，若目标数不为9，则该数值+1.</span></span><br><span class="line"><span class="comment">     *      若数组首位数为0，则需要在数组首位前添加一个数1.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> digits</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="comment">// 从数组最后一位数（digits.length-1）开始判断，若&lt;9，直接+1，若=9，采用逢十进一方法.</span></span><br><span class="line">        <span class="keyword">int</span> dIndex = digits.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isContinue = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (isContinue &amp;&amp; dIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (digits[dIndex] &lt; <span class="number">9</span>) &#123;</span><br><span class="line">                digits[dIndex] += <span class="number">1</span>;</span><br><span class="line">                isContinue = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                digits[dIndex] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dIndex --;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// while循环转化后若首位为0，则在原数组首位前需加一位1.</span></span><br><span class="line">        <span class="keyword">if</span> (digits[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] newDigits = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length+<span class="number">1</span>];</span><br><span class="line">            newDigits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; digits.length; i ++) &#123;</span><br><span class="line">                newDigits[i] = digits[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> newDigits;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * |-More Simple Solution:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] plusOneSimple (<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">int</span> dIndex = digits.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = dIndex; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">            <span class="keyword">if</span> (digits[i] &lt; <span class="number">9</span>) &#123;</span><br><span class="line">                digits[i] += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> digits;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// if ==9</span></span><br><span class="line">            digits[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 显然，上面for循环遍历完成后若走到该方法，说明数组首位为逢十进一数.</span></span><br><span class="line">        <span class="keyword">int</span>[] newDigits = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length+<span class="number">1</span>];</span><br><span class="line">        newDigits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newDigits;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] digits = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//        int[] result = plusOne(digits);</span></span><br><span class="line"><span class="comment">//        System.out.print("result is:");</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; result.length; i ++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print(result[i] + ",");</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result2 = plusOneSimple(digits);</span><br><span class="line">        System.out.print(<span class="string">"result2 is:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result2.length; i ++) &#123;</span><br><span class="line">            System.out.print(result2[i] + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019-04/data-structure-array-plusone/adorable-bench-blurred-background-1767434.jpg&quot; alt=&quot;data-structure-array-plusone&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码维护于GitHub：&lt;a href=&quot;https://github.com/zrxJuly/data-structure&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/zrxJuly/data-structure&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Coding Question:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;Given a non-empty array of digits representing a non-negative integer, plus one to the integer.&lt;br&gt;The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.&lt;br&gt;You may assume the integer does not contain any leading zero, except the number 0 itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;编程题:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加1.&lt;br&gt;最高位存放于数组首位，并且数组中的每个元素只包含一个数字.&lt;br&gt;你可以假设该整数除了整数0之外，不会以0开头.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：[1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[1,2,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：输入数组表示数字123.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://zrxjuly.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="LeetCode" scheme="https://zrxjuly.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LeetCode/"/>
    
    
      <category term="data structure" scheme="https://zrxjuly.github.io/tags/data-structure/"/>
    
      <category term="LeetCode" scheme="https://zrxjuly.github.io/tags/LeetCode/"/>
    
      <category term="array" scheme="https://zrxjuly.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>你，有多久没有好好努力过了？</title>
    <link href="https://zrxjuly.github.io/2019-03/fighting/"/>
    <id>https://zrxjuly.github.io/2019-03/fighting/</id>
    <published>2019-03-16T22:00:00.000Z</published>
    <updated>2020-02-23T14:23:09.438Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019-03/fighting/alone-dawn-daylight-325520.jpg" alt="fighting"> </p><p>&emsp;&emsp;<strong>你，有多久没有好好努力过了？</strong></p><p>&emsp;&emsp;学生党也好，上班族也好，亦或是在经营家庭的你也好，你有多久没有好好努力过了？</p><p>&emsp;&emsp;<strong>为自己、为你的将来，为你想要的生活，为你内心深处那永不破灭的梦想，你，有多久没有好好努力过了？</strong></p><p><img src="/2019-03/fighting/life-question.jpg" alt="fighting"> </p><p>&emsp;&emsp;我不知道你是否和我一样，二十多岁的年纪，心里怀揣着对自己未来的无限憧憬，每日看着那激励人心的鸡汤，在心里暗暗发誓，一定要好好努力，过上自己想要的生活。然而，自己却是「行动上的矮子」，没有一点斗志，好像对生活没有了激情，失去了战斗力。</p><p>&emsp;&emsp;我迷茫了。</p><p>&emsp;&emsp;现在，每天除了工作，剩余时间好像都不是自己的，甚至更可怕的是，连工作也不走心了。我的时间，被一个叫做「懒惰」的东西偷走了。不，准确的说，并非「偷」走，而是我的「拱手相让」，以致我不能支配自己的时间。这样的生活，从何时开始的？或许一个月前，或许去年。不管什么时候，现在的我，确是有很强烈的危机感。</p><p><img src="/2019-03/fighting/life-answer.jpg" alt="fighting"> </p><p>&emsp;&emsp;我害怕了。</p><p>&emsp;&emsp;二十多岁的年纪，本应是一个积极向上的年纪，而我却在明明知道走错路的情况下，继续向前走，<strong>一步错，步步错</strong>。我曾经告诫过自己，不管什么事情，<strong>「不贰过」</strong>，然而在很多事情上，我并没有做到。</p><p>&emsp;&emsp;你知道吗，<strong>慢慢的变成一个「不思进取、不求上进」的人是多么可怕，可怕到连你自己都害怕自己</strong>。</p><p>&emsp;&emsp;亦是如此可悲。</p><a id="more"></a><p>&emsp;&emsp;扪心自问，还是原来的自己吗？还是曾经那个做事积极努力、达不到目标后不甘心要更努力的自己吗？不是了。</p><p>&emsp;&emsp;曾经的你，或许很笨，但是你努力做好每一件事情，认真踏实；曾经的你，或许自卑，但是你会去追求自己的梦想、憧憬所有美好的生活，勇敢无畏；曾经的你，会让自己骄傲……</p><p><img src="/2019-03/fighting/art-business-close-up-279415.jpg" alt="fighting"> </p><p>&emsp;&emsp;甘心吗？甘心就这样了吗？</p><p>&emsp;&emsp;当然不甘心。</p><blockquote><p>当你觉得为时已晚的时候,恰恰是最早的时候。</p></blockquote><p>&emsp;&emsp; 所以，无论你现在是什么样的状态，一定要找到自己最佳的状态，每天为自己加油，做回那个充满活力、积极向上的你。</p><p>&emsp;&emsp;做最好的自己。</p><p>&emsp;&emsp;<strong>要有前程可奔赴，亦有岁月可回首。</strong></p><p>&emsp;&emsp;这句话，送给你，更送给我自己。</p><p>&emsp;&emsp;<strong><em>【公众号：<a href="https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=MzI0MTcwNDAzMw==&scene=124#wechat_redirect" target="_blank" rel="noopener">这世界独一无二的你</a> (请于微信内打开该链接)】</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019-03/fighting/alone-dawn-daylight-325520.jpg&quot; alt=&quot;fighting&quot;&gt; &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;你，有多久没有好好努力过了？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;学生党也好，上班族也好，亦或是在经营家庭的你也好，你有多久没有好好努力过了？&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;为自己、为你的将来，为你想要的生活，为你内心深处那永不破灭的梦想，你，有多久没有好好努力过了？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019-03/fighting/life-question.jpg&quot; alt=&quot;fighting&quot;&gt; &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我不知道你是否和我一样，二十多岁的年纪，心里怀揣着对自己未来的无限憧憬，每日看着那激励人心的鸡汤，在心里暗暗发誓，一定要好好努力，过上自己想要的生活。然而，自己却是「行动上的矮子」，没有一点斗志，好像对生活没有了激情，失去了战斗力。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我迷茫了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;现在，每天除了工作，剩余时间好像都不是自己的，甚至更可怕的是，连工作也不走心了。我的时间，被一个叫做「懒惰」的东西偷走了。不，准确的说，并非「偷」走，而是我的「拱手相让」，以致我不能支配自己的时间。这样的生活，从何时开始的？或许一个月前，或许去年。不管什么时候，现在的我，确是有很强烈的危机感。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019-03/fighting/life-answer.jpg&quot; alt=&quot;fighting&quot;&gt; &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我害怕了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;二十多岁的年纪，本应是一个积极向上的年纪，而我却在明明知道走错路的情况下，继续向前走，&lt;strong&gt;一步错，步步错&lt;/strong&gt;。我曾经告诫过自己，不管什么事情，&lt;strong&gt;「不贰过」&lt;/strong&gt;，然而在很多事情上，我并没有做到。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;你知道吗，&lt;strong&gt;慢慢的变成一个「不思进取、不求上进」的人是多么可怕，可怕到连你自己都害怕自己&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;亦是如此可悲。&lt;/p&gt;
    
    </summary>
    
      <category term="媛思" scheme="https://zrxjuly.github.io/categories/%E5%AA%9B%E6%80%9D/"/>
    
    
      <category term="媛思" scheme="https://zrxjuly.github.io/tags/%E5%AA%9B%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>「CRUD」真的简单吗？</title>
    <link href="https://zrxjuly.github.io/2019-01/CRUD/"/>
    <id>https://zrxjuly.github.io/2019-01/CRUD/</id>
    <published>2019-01-22T13:20:58.000Z</published>
    <updated>2020-02-23T14:23:09.436Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019-01/CRUD/analysis-blackboard-board-355952.jpg" alt="CRUD"> </p><blockquote><p>“天天做增删改查，一点进步都没有。”<br>“增删改查，太简单了！”<br>“全都是增删改查，一点技术含量都没有。”</p></blockquote><p>&emsp;&emsp;以上，是我听到的好多编程人员说过的话。CRUD，增(Create)、读取查询(Retrieve)、更新(改，Update)、删除(Delete)。都说CRUD简单，CRUD真的简单吗？你可能会说是，但“初出茅庐”的我并不这样觉得。<br>&emsp;&emsp;本人做项目经验不长，写程序过程中总结的一些问题，特此记录下来：</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p><strong>1.列表数据显示，是否判断了null及undefined的情况？</strong><br>&emsp;&emsp;<code>&quot;&quot;</code>空字符串还好，如果数据返回到前端有属性为<code>&quot;&quot;</code>,页面显示直接是空的，不过为了好看一些，有的必要加上<code>-</code>替代下空，也是可以的。<br>&emsp;&emsp;<code>null</code>和<code>undefined</code>空值和未定义的值，数据返回到前端为<code>null</code>或<code>undefined</code>，这类数据就得判断一下了（当然，像vue等一些前端框架本身就处理了这些问题，如果前端数据为null或undefined，页面显示直接是空），如果不判断，用户看到实际为<code>null</code>或<code>undefined</code>这样的数据，肯定一头雾水了。</p><p><strong>2.查询时，是否用<code>ORDER BY</code>将数据升序或降序排序了？</strong><br>&emsp;&emsp;列表数据显示时，很多情况下是有必要将数据进行排序的。像有日期类型的字段，考虑有些是否需要用<code>ORDER BY DESC</code>降序排列下，像主键若是自增的，是否按主键<code>ORDER BY</code>了等等。如果不排序，数据显示的就会特别乱，比如用户刚添加了一条数据，本应该在列表中显示在第一行，一眼可看到的，但是找了好几页都没有找到，这就有问题了，这就是由于查询时没有对数据进行排序造成的。更可怕的是如果分页功能有问题，数据已经有很多页，而我添加的数据并没有在第一页显示，点分页又没作用，这可如何是好=.=(本人之前遇到过这种问题，所以吃一堑，长一智)。</p><p><strong>3.像带有状态条件的数据，查询时是否根据相应条件正确过滤了数据？</strong><br>&emsp;&emsp;如一个表中用<code>status</code>字段标识数据的可用性，<code>0-正常；1-冻结；2-已删除</code>，那么查询的时候<code>status=2</code>甚至<code>status=1</code>的数据就不能查询出来显示到页面中，你在查询的时候是否用<code>WHERE STATUS=0</code>来将数据过滤了？（这只是举了个栗子，当然还是按需求来）</p><a id="more"></a><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>&emsp;&emsp;删除，分为<strong><em>软删除</em></strong> 和 <strong><em>硬删除</em></strong>。<br>&emsp;&emsp;所谓软删除就是删除时保留数据库表中相应记录，只是用<code>UPDATE</code>语句更新表中某个状态字段，标识为已删除(eg:第一部分第3条中提到的栗子)，而列表显示的时候是需要过滤掉这个字段中<code>已删除</code>的状态的。<br>&emsp;&emsp;硬删除，也就是永久删除。使用<code>DELETE</code>语句，彻底将相应记录从数据库表中删除。<br>&emsp;&emsp;做删除功能的时候，考虑到业务逻辑相关，其他表的相关字段是否需要清空？其他表的相关记录是否也需要一起删除或更新？这些都是要考虑到的。业务逻辑简单还好，要是复杂了，考虑的必定也就多了。</p><h3 id="添加or修改"><a href="#添加or修改" class="headerlink" title="添加or修改"></a>添加or修改</h3><p>&emsp;&emsp;对于数据的添加，如果表中字段没有设置初始默认值，需要注意添加的时候需要添加上；修改时同理，哪些字段该修改，哪些字段是不必要或不可修改的，这需要好好熟悉理解业务。<br>……<br>[其他的遇到坑了再补充吧~ ]</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&emsp;&emsp;如果开发时期不注意相关细节，那么测试的时候就会面临代码的重复甚至大量修改，会非常麻烦。不管在查询、添加、修改还是删除，都需要根据业务、表中相应状态字段等等，去进行验证、匹配，确保数据的正确性、一致性。业务越复杂，表之间的关联关系也就越复杂，所以要很熟悉数据库表与表之间的关联关系，熟悉业务，这样做起来会很容易些。其实每写一个SQL，每做一次增删改查，都要从整个业务的关联关系角度思考下，这个事务是否会对其他业务有影响，有什么影响，怎么做是正确的。实践越多，犯错误无可避免，也会越多，自然总结的就会更多。要常常自我反省。正所谓吾日三省吾身，会省才会有进步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019-01/CRUD/analysis-blackboard-board-355952.jpg&quot; alt=&quot;CRUD&quot;&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“天天做增删改查，一点进步都没有。”&lt;br&gt;“增删改查，太简单了！”&lt;br&gt;“全都是增删改查，一点技术含量都没有。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以上，是我听到的好多编程人员说过的话。CRUD，增(Create)、读取查询(Retrieve)、更新(改，Update)、删除(Delete)。都说CRUD简单，CRUD真的简单吗？你可能会说是，但“初出茅庐”的我并不这样觉得。&lt;br&gt;&amp;emsp;&amp;emsp;本人做项目经验不长，写程序过程中总结的一些问题，特此记录下来：&lt;/p&gt;
&lt;h3 id=&quot;查询&quot;&gt;&lt;a href=&quot;#查询&quot; class=&quot;headerlink&quot; title=&quot;查询&quot;&gt;&lt;/a&gt;查询&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.列表数据显示，是否判断了null及undefined的情况？&lt;/strong&gt;&lt;br&gt;&amp;emsp;&amp;emsp;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;空字符串还好，如果数据返回到前端有属性为&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;,页面显示直接是空的，不过为了好看一些，有的必要加上&lt;code&gt;-&lt;/code&gt;替代下空，也是可以的。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;code&gt;null&lt;/code&gt;和&lt;code&gt;undefined&lt;/code&gt;空值和未定义的值，数据返回到前端为&lt;code&gt;null&lt;/code&gt;或&lt;code&gt;undefined&lt;/code&gt;，这类数据就得判断一下了（当然，像vue等一些前端框架本身就处理了这些问题，如果前端数据为null或undefined，页面显示直接是空），如果不判断，用户看到实际为&lt;code&gt;null&lt;/code&gt;或&lt;code&gt;undefined&lt;/code&gt;这样的数据，肯定一头雾水了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.查询时，是否用&lt;code&gt;ORDER BY&lt;/code&gt;将数据升序或降序排序了？&lt;/strong&gt;&lt;br&gt;&amp;emsp;&amp;emsp;列表数据显示时，很多情况下是有必要将数据进行排序的。像有日期类型的字段，考虑有些是否需要用&lt;code&gt;ORDER BY DESC&lt;/code&gt;降序排列下，像主键若是自增的，是否按主键&lt;code&gt;ORDER BY&lt;/code&gt;了等等。如果不排序，数据显示的就会特别乱，比如用户刚添加了一条数据，本应该在列表中显示在第一行，一眼可看到的，但是找了好几页都没有找到，这就有问题了，这就是由于查询时没有对数据进行排序造成的。更可怕的是如果分页功能有问题，数据已经有很多页，而我添加的数据并没有在第一页显示，点分页又没作用，这可如何是好=.=(本人之前遇到过这种问题，所以吃一堑，长一智)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.像带有状态条件的数据，查询时是否根据相应条件正确过滤了数据？&lt;/strong&gt;&lt;br&gt;&amp;emsp;&amp;emsp;如一个表中用&lt;code&gt;status&lt;/code&gt;字段标识数据的可用性，&lt;code&gt;0-正常；1-冻结；2-已删除&lt;/code&gt;，那么查询的时候&lt;code&gt;status=2&lt;/code&gt;甚至&lt;code&gt;status=1&lt;/code&gt;的数据就不能查询出来显示到页面中，你在查询的时候是否用&lt;code&gt;WHERE STATUS=0&lt;/code&gt;来将数据过滤了？（这只是举了个栗子，当然还是按需求来）&lt;/p&gt;
    
    </summary>
    
      <category term="媛思" scheme="https://zrxjuly.github.io/categories/%E5%AA%9B%E6%80%9D/"/>
    
    
      <category term="程序性思维" scheme="https://zrxjuly.github.io/tags/%E7%A8%8B%E5%BA%8F%E6%80%A7%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>生活，总归待我不差[致我的2018]</title>
    <link href="https://zrxjuly.github.io/2018-12/happyending-2018/"/>
    <id>https://zrxjuly.github.io/2018-12/happyending-2018/</id>
    <published>2018-12-31T15:38:30.000Z</published>
    <updated>2020-02-23T14:23:09.406Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018-12/happyending-2018/happyending-2018.jpg" alt="happyending-2018"> </p><p>&emsp;&emsp;2018年，算是人生中非常重要的一年。这一年，我离开校园，真正走向社会，像刚出巢的鸟儿，扑楞着那还没长硬的翅膀，在天空中探寻着属于自己的方向；这一年，努力过，迷茫过，期待过，失望过，开心过，沮丧过；这一年，错过了许多机会，但也足够幸运；这一年，来到了自己曾梦寐以求的城市，过着自己喜欢的生活；这一年，遇到了对我人生中有很重要影响的人，或良师，或益友；这一年，失去了很多宝贵的东西，但我也可以安慰自己：生活，总归待我不差。<br>&emsp;&emsp;离开校园，步入职场。校园外的世界并没有想象中的那么可怕。对未来充满无限期待。做着自己喜欢的工作，努力着，累但快乐着。但是，几个月后，突然厌倦了这种生活，特别讨厌，或许是后来着手了自己不太喜欢的工作内容，亦或者没有了压力、动力，对工作、生活没有了积极性，我变得懒惰，变得对生活没有热情，迷失了方向，变得更加迷茫。知道自己再这样下去会变得越来越颓废，我觉得我该换一个环境，换一种生活，因此，毕业后一个月内，我提出了离职，离开时，正好在公司半年。<br>&emsp;&emsp;心心念了好久的考研计划就此搁置，或许，这让我失去了很多重要的机会。只身一人，去往自己向往的城市，期待着自己向往的生活，然而，并不像想象中那样顺利。工作，足有二十余天才定下来，这期间，失望、无助，有时候还会想，是不是就要回去了，但是自己不甘心，我并不觉得我哪里差了。失望之际，算是遇上了人生中一伯乐，之后又遇到人生又一导师。我，足够幸运。工作这段时间，挑战了自己身体的极限，心灵的极限，自己也没想到，我原来可以承受这么多。有压力才会有动力，才会让自己飞速成长。</p><a id="more"></a><p>&emsp;&emsp;这一年，过得太快太快了，所有的经历仿佛都在昨天。我相信，每一次经历，都是一种成长；我期待，2019年，这更加有挑战性的一年；我希望，遇见更优秀的自己。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018-12/happyending-2018/happyending-2018.jpg&quot; alt=&quot;happyending-2018&quot;&gt; &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;2018年，算是人生中非常重要的一年。这一年，我离开校园，真正走向社会，像刚出巢的鸟儿，扑楞着那还没长硬的翅膀，在天空中探寻着属于自己的方向；这一年，努力过，迷茫过，期待过，失望过，开心过，沮丧过；这一年，错过了许多机会，但也足够幸运；这一年，来到了自己曾梦寐以求的城市，过着自己喜欢的生活；这一年，遇到了对我人生中有很重要影响的人，或良师，或益友；这一年，失去了很多宝贵的东西，但我也可以安慰自己：生活，总归待我不差。&lt;br&gt;&amp;emsp;&amp;emsp;离开校园，步入职场。校园外的世界并没有想象中的那么可怕。对未来充满无限期待。做着自己喜欢的工作，努力着，累但快乐着。但是，几个月后，突然厌倦了这种生活，特别讨厌，或许是后来着手了自己不太喜欢的工作内容，亦或者没有了压力、动力，对工作、生活没有了积极性，我变得懒惰，变得对生活没有热情，迷失了方向，变得更加迷茫。知道自己再这样下去会变得越来越颓废，我觉得我该换一个环境，换一种生活，因此，毕业后一个月内，我提出了离职，离开时，正好在公司半年。&lt;br&gt;&amp;emsp;&amp;emsp;心心念了好久的考研计划就此搁置，或许，这让我失去了很多重要的机会。只身一人，去往自己向往的城市，期待着自己向往的生活，然而，并不像想象中那样顺利。工作，足有二十余天才定下来，这期间，失望、无助，有时候还会想，是不是就要回去了，但是自己不甘心，我并不觉得我哪里差了。失望之际，算是遇上了人生中一伯乐，之后又遇到人生又一导师。我，足够幸运。工作这段时间，挑战了自己身体的极限，心灵的极限，自己也没想到，我原来可以承受这么多。有压力才会有动力，才会让自己飞速成长。&lt;/p&gt;
    
    </summary>
    
      <category term="人生" scheme="https://zrxjuly.github.io/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="summary" scheme="https://zrxjuly.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令学习总结</title>
    <link href="https://zrxjuly.github.io/2018-12/linux-study-01/"/>
    <id>https://zrxjuly.github.io/2018-12/linux-study-01/</id>
    <published>2018-12-25T22:58:43.000Z</published>
    <updated>2020-02-23T14:23:09.422Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018-12/linux-study-01/linux-study.jpg" alt="linux-study"> </p><h3 id="Windows连接Linux服务器常用工具使用"><a href="#Windows连接Linux服务器常用工具使用" class="headerlink" title="Windows连接Linux服务器常用工具使用"></a>Windows连接Linux服务器常用工具使用</h3><h4 id="winscp"><a href="#winscp" class="headerlink" title="winscp"></a>winscp</h4><p>&emsp;&emsp;Winscp是Windows环境下的图形化SFTP客户端，同时支持SCP协议。主要功能是实现在本地与远程计算机之间安全的复制文件。winscp可连接Linux系统。</p><h4 id="SecureCRT"><a href="#SecureCRT" class="headerlink" title="SecureCRT"></a>SecureCRT</h4><p>&emsp;&emsp;Windows下登录UNIX或Linux服务器主机的软件。</p><h3 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h3><h4 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch filename</span><br></pre></td></tr></table></figure><p>例：新建一个名为zrxJuly的txt文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch zrxJuly.txt</span><br></pre></td></tr></table></figure><h4 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir directory</span><br></pre></td></tr></table></figure><p>例：新建一个名为zrxJuly的目录(文件夹)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir zrxJuly</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="查看文本内容"><a href="#查看文本内容" class="headerlink" title="查看文本内容"></a>查看文本内容</h4><table><thead><tr><th>命令</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>cat filename</td><td>从第一行开始显示所有的文本内容</td><td>cat zrxJuly.txt</td></tr><tr><td>tac filename</td><td>从最后一行开始显示所有文本内容,与cat相反</td><td>tac zrxJuly.txt</td></tr><tr><td>nl filename</td><td>显示文本，输出行号</td><td>nl zrxJuly.txt</td></tr><tr><td>more filename</td><td>按页显示文本内容</td><td>more zrxJuly.txt</td></tr><tr><td>tail -f</td><td>实时查看日志文件</td><td>tail -f web.log</td></tr><tr><td>#### 压缩文件(zip)</td><td></td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip 参数 打包后的文件名 打包的目录路径</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr></tbody></table><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip zrxJuly.zip zrxJuly</span><br></pre></td></tr></table></figure><h4 id="解压文件-zip"><a href="#解压文件-zip" class="headerlink" title="解压文件(zip)"></a>解压文件(zip)</h4><table><thead><tr><th>命令</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>unzip zipName</td><td>解压文件到当前目录</td><td>unzip zrxJuly.zip</td></tr><tr><td>unzip -o zipName</td><td>解压时不询问直接覆盖</td><td>tac zrxJuly.txt</td></tr><tr><td>unzip zipName -d  directory</td><td>将文件解压到指定文件夹</td><td>unzip zrxJuly.zip -d  /data/bak</td></tr><tr><td>unzip -v zipName</td><td>查看压缩包内容但不解压</td><td>unzip -v zrxJuly.zip</td></tr><tr><td>zcat gzName</td><td>查看压缩后的文件内容</td><td>zcat zrxJuly.gz</td></tr><tr><td>#### 复制文件及文件夹到指定目录</td><td></td><td></td></tr><tr><td>将aa复制到/aa/bb目录下</td><td></td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -rf aa /aa/bb</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr></tbody></table><p>aa: 要复制的文件或文件夹<br>/aa/bb:将文件或文件夹复制到的指定目录</p><h4 id="移动文件到指定目录"><a href="#移动文件到指定目录" class="headerlink" title="移动文件到指定目录"></a>移动文件到指定目录</h4><p>移动file到tofile目录中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv file tofile</span><br></pre></td></tr></table></figure><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf file</span><br></pre></td></tr></table></figure><p>该命令强制删除file及file目录下的所有文件，如果没有<code>-r</code>，则不会删除目录。<br><code>-f</code>：忽略不存在的文件，强制删除，不给出提示；<br><code>-r</code>：指示rm将参数中列出的全部目录和子目录均递归地删除；<br><code>-i</code>：进行交互式删除。</p><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><ol><li><p>查看或编辑文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi filename</span><br></pre></td></tr></table></figure></li><li><p>vim编辑模式下快捷键</p></li></ol><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ctrlb或键盘ctrl+B</td><td>向上翻页</td></tr><tr><td>ctrlf或键盘ctrl+F</td><td>向下翻页</td></tr><tr><td>ESC，/hello</td><td>关键词搜索：vim下，按ESC进入命令模式，若查询关键词“hello”，则输入  /hello  进行查找；</td></tr><tr><td>gg</td><td>跳至文件首行</td></tr><tr><td>dG</td><td>清空整个文件</td></tr><tr><td>:wq，回车</td><td>保存并退出</td></tr><tr><td>:wq!，回车</td><td>强制保存退出</td></tr><tr><td>:q，回车</td><td>退出vim编辑</td></tr><tr><td>:q!，回车</td><td>强制退出编辑</td></tr><tr><td>i，ESC</td><td>插入内容：输入i，进行内容编辑，完成后按ESC退出编辑</td></tr></tbody></table><h4 id="tomcat服务器启动与关闭"><a href="#tomcat服务器启动与关闭" class="headerlink" title="tomcat服务器启动与关闭"></a>tomcat服务器启动与关闭</h4><p>cd到tomcat的bin目录下，<br>启动服务器命令：<code>./startup.sh</code><br>查看log日志：<code>tail -f ../logs/catalian.out</code><br>关闭服务：<code>./shutdown.sh</code></p><p>或者：</p><p><code>sh catalian.sh start</code><br><code>sh catalian.sh stop</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018-12/linux-study-01/linux-study.jpg&quot; alt=&quot;linux-study&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;Windows连接Linux服务器常用工具使用&quot;&gt;&lt;a href=&quot;#Windows连接Linux服务器常用工具使用&quot; class=&quot;headerlink&quot; title=&quot;Windows连接Linux服务器常用工具使用&quot;&gt;&lt;/a&gt;Windows连接Linux服务器常用工具使用&lt;/h3&gt;&lt;h4 id=&quot;winscp&quot;&gt;&lt;a href=&quot;#winscp&quot; class=&quot;headerlink&quot; title=&quot;winscp&quot;&gt;&lt;/a&gt;winscp&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Winscp是Windows环境下的图形化SFTP客户端，同时支持SCP协议。主要功能是实现在本地与远程计算机之间安全的复制文件。winscp可连接Linux系统。&lt;/p&gt;
&lt;h4 id=&quot;SecureCRT&quot;&gt;&lt;a href=&quot;#SecureCRT&quot; class=&quot;headerlink&quot; title=&quot;SecureCRT&quot;&gt;&lt;/a&gt;SecureCRT&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Windows下登录UNIX或Linux服务器主机的软件。&lt;/p&gt;
&lt;h3 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h3&gt;&lt;h4 id=&quot;新建文件&quot;&gt;&lt;a href=&quot;#新建文件&quot; class=&quot;headerlink&quot; title=&quot;新建文件&quot;&gt;&lt;/a&gt;新建文件&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;touch filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;例：新建一个名为zrxJuly的txt文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;touch zrxJuly.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;新建目录&quot;&gt;&lt;a href=&quot;#新建目录&quot; class=&quot;headerlink&quot; title=&quot;新建目录&quot;&gt;&lt;/a&gt;新建目录&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;例：新建一个名为zrxJuly的目录(文件夹)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir zrxJuly&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zrxjuly.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://zrxjuly.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用Jasypt对SpringBoot配置文件加密</title>
    <link href="https://zrxjuly.github.io/2018-12/SpringBoot-Jasypt/"/>
    <id>https://zrxjuly.github.io/2018-12/SpringBoot-Jasypt/</id>
    <published>2018-12-20T03:17:57.000Z</published>
    <updated>2020-02-23T14:23:09.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Jasypt介绍"><a href="#一、Jasypt介绍" class="headerlink" title="一、Jasypt介绍"></a>一、Jasypt介绍</h3><p>&emsp;&emsp;Jasypt(Java Simplified Encryption)，为开发人员提供一种简单的方式来为项目增加加密功能，包括：密码Digest认证，文本和对象加密，集成hibernate、Spring Security来增强密码管理。Jasypt1.4新特性：加密属性文件、Spring Framework集成、加密Hibernate数据源配置、新的命令行工具、URL加密的Apache wicket集成、升级文档。</p><h3 id="二、Jasypt作用"><a href="#二、Jasypt作用" class="headerlink" title="二、Jasypt作用"></a>二、Jasypt作用</h3><p>1.加密任务与应用程序。例如：加密密码、敏感信息和数据通信、创建完整检查数据的sums。<br>2.包括高安全性、基于标准的加密技术、可同时单向和双向加密的加密密码、文本、数字和二进制文件。<br>3.符合RSA标准的基于密码的加密，并提供了无配置加密工具以及新的、高可配置标准的加密工具。<br>4.加密属性文件（encryptable properties files）、Spring work集成、加密Hibernate数据源配置、新的命令行工具、URL加密的Apache wicket集成以及升级文档。</p><h3 id="三、使用Jasypt对SpringBoot配置文件加密"><a href="#三、使用Jasypt对SpringBoot配置文件加密" class="headerlink" title="三、使用Jasypt对SpringBoot配置文件加密"></a>三、使用Jasypt对SpringBoot配置文件加密</h3><h4 id="1-pom-xml中引入依赖"><a href="#1-pom-xml中引入依赖" class="headerlink" title="1.pom.xml中引入依赖"></a>1.pom.xml中引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jasypt加密依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-application-yml配置文件中配置加密所需的salt-盐"><a href="#2-application-yml配置文件中配置加密所需的salt-盐" class="headerlink" title="2.application.yml配置文件中配置加密所需的salt(盐)"></a>2.application.yml配置文件中配置加密所需的salt(盐)</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jasypt用于数据库url及密码加密.</span></span><br><span class="line"><span class="attr">jasypt:</span></span><br><span class="line"><span class="attr">  encryptor:</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">zrxJuly</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="3-加密"><a href="#3-加密" class="headerlink" title="3.加密"></a>3.加密</h4><p>这里给配置文件中的链接数据库的用户名及密码加密。新建一个工具类JasyptUtil，main方法中加密代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BasicTextEncryptor textEncryptor = <span class="keyword">new</span> BasicTextEncryptor();</span><br><span class="line">    <span class="comment">//1.加密所需的salt(盐)，此处的值要与application中的配置的password一样。 application.yml中配置：jasypt.encryptor.password=zrxJuly</span></span><br><span class="line">    textEncryptor.setPassword(<span class="string">"zrxJuly"</span>);</span><br><span class="line">    <span class="comment">//2.要加密的数据.运行完main方法后，将打印出的加密内容在application.yml相关参数中替换：</span></span><br><span class="line">    String user = textEncryptor.encrypt(<span class="string">"postgres"</span>);</span><br><span class="line">    String password = textEncryptor.encrypt(<span class="string">"zrx"</span>);</span><br><span class="line">    <span class="comment">// application.yml中替换：ENC(jdbcUrl)   ENC(password)</span></span><br><span class="line">    System.out.println(<span class="string">"user:"</span>+user);</span><br><span class="line">    System.out.println(<span class="string">"password:"</span>+password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法，结果如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span><span class="string">leMoA9uT7nBUbd/oNSzl+tzbjBRyeRGk</span></span><br><span class="line"><span class="attr">password:</span><span class="string">jLKpSiNXZ0EQKnryRhMgVg==</span></span><br></pre></td></tr></table></figure><p>将配置文件application.yml中的数据库的用户名及密码替换为上述结果。加密字符串要在ENC()中。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span> <span class="string">ENC(leMoA9uT7nBUbd/oNSzl+tzbjBRyeRGk)</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">ENC(jLKpSiNXZ0EQKnryRhMgVg==)</span></span><br></pre></td></tr></table></figure><p>运行项目，看数据库是否能连接上，若能正常链接，则加密成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Jasypt介绍&quot;&gt;&lt;a href=&quot;#一、Jasypt介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Jasypt介绍&quot;&gt;&lt;/a&gt;一、Jasypt介绍&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Jasypt(Java Simplified Encryption)，为开发人员提供一种简单的方式来为项目增加加密功能，包括：密码Digest认证，文本和对象加密，集成hibernate、Spring Security来增强密码管理。Jasypt1.4新特性：加密属性文件、Spring Framework集成、加密Hibernate数据源配置、新的命令行工具、URL加密的Apache wicket集成、升级文档。&lt;/p&gt;
&lt;h3 id=&quot;二、Jasypt作用&quot;&gt;&lt;a href=&quot;#二、Jasypt作用&quot; class=&quot;headerlink&quot; title=&quot;二、Jasypt作用&quot;&gt;&lt;/a&gt;二、Jasypt作用&lt;/h3&gt;&lt;p&gt;1.加密任务与应用程序。例如：加密密码、敏感信息和数据通信、创建完整检查数据的sums。&lt;br&gt;2.包括高安全性、基于标准的加密技术、可同时单向和双向加密的加密密码、文本、数字和二进制文件。&lt;br&gt;3.符合RSA标准的基于密码的加密，并提供了无配置加密工具以及新的、高可配置标准的加密工具。&lt;br&gt;4.加密属性文件（encryptable properties files）、Spring work集成、加密Hibernate数据源配置、新的命令行工具、URL加密的Apache wicket集成以及升级文档。&lt;/p&gt;
&lt;h3 id=&quot;三、使用Jasypt对SpringBoot配置文件加密&quot;&gt;&lt;a href=&quot;#三、使用Jasypt对SpringBoot配置文件加密&quot; class=&quot;headerlink&quot; title=&quot;三、使用Jasypt对SpringBoot配置文件加密&quot;&gt;&lt;/a&gt;三、使用Jasypt对SpringBoot配置文件加密&lt;/h3&gt;&lt;h4 id=&quot;1-pom-xml中引入依赖&quot;&gt;&lt;a href=&quot;#1-pom-xml中引入依赖&quot; class=&quot;headerlink&quot; title=&quot;1.pom.xml中引入依赖&quot;&gt;&lt;/a&gt;1.pom.xml中引入依赖&lt;/h4&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- jasypt加密依赖 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.ulisesbocchio&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jasypt-spring-boot-starter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.16&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;2-application-yml配置文件中配置加密所需的salt-盐&quot;&gt;&lt;a href=&quot;#2-application-yml配置文件中配置加密所需的salt-盐&quot; class=&quot;headerlink&quot; title=&quot;2.application.yml配置文件中配置加密所需的salt(盐)&quot;&gt;&lt;/a&gt;2.application.yml配置文件中配置加密所需的salt(盐)&lt;/h4&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# jasypt用于数据库url及密码加密.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;jasypt:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  encryptor:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    password:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;zrxJuly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://zrxjuly.github.io/categories/SpringBoot/"/>
    
    
      <category term="Jasypt" scheme="https://zrxjuly.github.io/tags/Jasypt/"/>
    
  </entry>
  
  <entry>
    <title>使用Gson解析复杂的json数组</title>
    <link href="https://zrxjuly.github.io/2018-10/analysis-json/"/>
    <id>https://zrxjuly.github.io/2018-10/analysis-json/</id>
    <published>2018-10-20T06:40:56.000Z</published>
    <updated>2020-02-23T14:23:09.387Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018-10/analysis-json/blog-pic.jpg" alt="analysis-json"> </p><h3 id="前端使用Ajax传值到后端"><a href="#前端使用Ajax传值到后端" class="headerlink" title="前端使用Ajax传值到后端"></a>前端使用Ajax传值到后端</h3><p>代码示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postData = [];</span><br><span class="line"><span class="keyword">var</span> json1 = &#123;<span class="string">"a"</span>:<span class="string">"a"</span>,<span class="string">"b"</span>:<span class="string">"b"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> jsonArray = [&#123;<span class="string">"id"</span>:<span class="string">"a"</span>,<span class="string">"name"</span>:<span class="string">"zrxJuly"</span>&#125;,&#123;<span class="string">"id"</span>:<span class="string">"b"</span>,<span class="string">"name"</span>:<span class="string">"Anna"</span>&#125;,&#123;<span class="string">"id"</span>:<span class="string">"c"</span>,<span class="string">"name"</span>:<span class="string">"Andy"</span>&#125;];</span><br><span class="line">postData.push(&#123;<span class="string">"json1"</span>:json1&#125;);</span><br><span class="line">postData.push(&#123;<span class="string">"jsonArray"</span>:jsonArray&#125;);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type : <span class="string">"post"</span>,</span><br><span class="line">    url : <span class="string">"/test"</span>,</span><br><span class="line">    data : &#123;<span class="attr">testData</span>:<span class="built_in">JSON</span>.stringify(postData)&#125;,</span><br><span class="line">    dataType : <span class="string">"json"</span>,</span><br><span class="line">    success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'成功后的回调函数'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    error : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'失败后的回调函数'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="后端接收前端传来的数据"><a href="#后端接收前端传来的数据" class="headerlink" title="后端接收前端传来的数据"></a>后端接收前端传来的数据</h3><blockquote><p>后端SpringBoot接收前端数据及处理,使用Gson解析json.  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/test"</span>, produces = &#123; MediaType.APPLICATION_JSON_UTF8_VALUE &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String testData)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// JSON数据格式：</span></span><br><span class="line">    <span class="comment">// [&#123;"A":"Anna","B":"Bob"&#125;,&#123;"json1":&#123;"A":"a","B":"b"&#125;&#125;,&#123;"jsonArray":[&#123;"A":"a","B":"zrxJuly"&#125;,&#123;"A":"b","B":"Anna"&#125;,&#123;"A":"c","B":"Andy"&#125;]&#125;]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//String testData = "[&#123;\"A\":\"Anna\",\"B\":\"Bob\"&#125;,&#123;\"json1\":&#123;\"A\":\"a\",\"B\":\"b\"&#125;&#125;,&#123;\"jsonArray\":[&#123;\"A\":\"a\",\"B\":\"zrxJuly\"&#125;,&#123;\"A\":\"b\",\"B\":\"Anna\"&#125;,&#123;\"A\":\"c\",\"B\":\"Andy\"&#125;]&#125;]";</span></span><br><span class="line">    System.out.println(<span class="string">"=================获取的json：============="</span>);</span><br><span class="line">    System.out.println(testData);</span><br><span class="line">    <span class="comment">// 1.将该json数组字符串转化为json数组对象.</span></span><br><span class="line">    JSONArray dataJson = JSONArray.fromObject(testData);</span><br><span class="line">    <span class="comment">// 获取数组元素,数组内元素都是json.</span></span><br><span class="line">    <span class="comment">// 获取第一种json.</span></span><br><span class="line">    System.out.println(<span class="string">"======获取第一种json:"</span>+dataJson.get(<span class="number">0</span>));</span><br><span class="line">    <span class="comment">// 映射为对象.</span></span><br><span class="line">    Json1 json1 = <span class="keyword">new</span> Gson().fromJson(dataJson.get(<span class="number">0</span>).toString(), Json1.class);</span><br><span class="line">    System.out.println(json1.getA());</span><br><span class="line">    System.out.println(json1.getB());</span><br><span class="line">    System.out.println(json1.toString());</span><br><span class="line">    <span class="comment">// 获取第二种json. key:value形式.</span></span><br><span class="line">    System.out.println(<span class="string">"======获取第二种json. key:value形式："</span>+dataJson.get(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 将获取的值解析为Json对象.</span></span><br><span class="line">    JsonObject jsonObject2 = (JsonObject) <span class="keyword">new</span> JsonParser().parse(dataJson.get(<span class="number">1</span>).toString());</span><br><span class="line">    <span class="comment">// 映射为对象.</span></span><br><span class="line">    Json1 json11 = <span class="keyword">new</span> Gson().fromJson(jsonObject2.get(<span class="string">"json1"</span>), Json1.class);</span><br><span class="line">    System.out.println(json11.getA());</span><br><span class="line">    System.out.println(json11.getB());</span><br><span class="line">    System.out.println(json11.toString());</span><br><span class="line">    <span class="comment">// 获取第三种json：json数组</span></span><br><span class="line">    System.out.println(<span class="string">"======获取第三种json：json数组："</span>+dataJson.get(<span class="number">2</span>));</span><br><span class="line">    JsonObject jsonObject3 = (JsonObject) <span class="keyword">new</span> JsonParser().parse(dataJson.get(<span class="number">2</span>).toString());</span><br><span class="line">    List&lt;Json1&gt; json1List = <span class="keyword">new</span> Gson().fromJson(jsonObject3.get(<span class="string">"jsonArray"</span>), <span class="keyword">new</span> TypeToken&lt;List&lt;Json1&gt;&gt;() &#123;&#125;.getType());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; json1List.size(); i ++) &#123;</span><br><span class="line">        System.out.println(json1List.get(i).getA()+<span class="string">":"</span>+json1List.get(i).getB());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>在解析json取值前，我们需要将json对象映射为我们实体类中的对象,需要建立json的映射Bean.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zrxJuly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> json的映射Bean.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Json1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String A;</span><br><span class="line">    <span class="keyword">private</span> String B;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">        A = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> B;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(String b)</span> </span>&#123;</span><br><span class="line">        B = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Json1 [A="</span> + A + <span class="string">", B="</span> + B + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="/2018-10/analysis-json/20181020162045.png" alt="analysis-json"> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018-10/analysis-json/blog-pic.jpg&quot; alt=&quot;analysis-json&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;前端使用Ajax传值到后端&quot;&gt;&lt;a href=&quot;#前端使用Ajax传值到后端&quot; class=&quot;headerlink&quot; title=&quot;前端使用Ajax传值到后端&quot;&gt;&lt;/a&gt;前端使用Ajax传值到后端&lt;/h3&gt;&lt;p&gt;代码示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; postData = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; json1 = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jsonArray = [&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;zrxJuly&quot;&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Anna&quot;&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Andy&quot;&lt;/span&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;postData.push(&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;json1&quot;&lt;/span&gt;:json1&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;postData.push(&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;jsonArray&quot;&lt;/span&gt;:jsonArray&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type : &lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url : &lt;span class=&quot;string&quot;&gt;&quot;/test&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data : &amp;#123;&lt;span class=&quot;attr&quot;&gt;testData&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(postData)&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataType : &lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    success : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;成功后的回调函数&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;失败后的回调函数&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;后端接收前端传来的数据&quot;&gt;&lt;a href=&quot;#后端接收前端传来的数据&quot; class=&quot;headerlink&quot; title=&quot;后端接收前端传来的数据&quot;&gt;&lt;/a&gt;后端接收前端传来的数据&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;后端SpringBoot接收前端数据及处理,使用Gson解析json.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@PostMapping&lt;/span&gt;(value = &lt;span class=&quot;string&quot;&gt;&quot;/test&quot;&lt;/span&gt;, produces = &amp;#123; MediaType.APPLICATION_JSON_UTF8_VALUE &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String testData)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// JSON数据格式：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// [&amp;#123;&quot;A&quot;:&quot;Anna&quot;,&quot;B&quot;:&quot;Bob&quot;&amp;#125;,&amp;#123;&quot;json1&quot;:&amp;#123;&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;&amp;#125;&amp;#125;,&amp;#123;&quot;jsonArray&quot;:[&amp;#123;&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;zrxJuly&quot;&amp;#125;,&amp;#123;&quot;A&quot;:&quot;b&quot;,&quot;B&quot;:&quot;Anna&quot;&amp;#125;,&amp;#123;&quot;A&quot;:&quot;c&quot;,&quot;B&quot;:&quot;Andy&quot;&amp;#125;]&amp;#125;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//String testData = &quot;[&amp;#123;\&quot;A\&quot;:\&quot;Anna\&quot;,\&quot;B\&quot;:\&quot;Bob\&quot;&amp;#125;,&amp;#123;\&quot;json1\&quot;:&amp;#123;\&quot;A\&quot;:\&quot;a\&quot;,\&quot;B\&quot;:\&quot;b\&quot;&amp;#125;&amp;#125;,&amp;#123;\&quot;jsonArray\&quot;:[&amp;#123;\&quot;A\&quot;:\&quot;a\&quot;,\&quot;B\&quot;:\&quot;zrxJuly\&quot;&amp;#125;,&amp;#123;\&quot;A\&quot;:\&quot;b\&quot;,\&quot;B\&quot;:\&quot;Anna\&quot;&amp;#125;,&amp;#123;\&quot;A\&quot;:\&quot;c\&quot;,\&quot;B\&quot;:\&quot;Andy\&quot;&amp;#125;]&amp;#125;]&quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;=================获取的json：=============&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(testData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1.将该json数组字符串转化为json数组对象.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    JSONArray dataJson = JSONArray.fromObject(testData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取数组元素,数组内元素都是json.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取第一种json.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;======获取第一种json:&quot;&lt;/span&gt;+dataJson.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 映射为对象.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Json1 json1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Gson().fromJson(dataJson.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).toString(), Json1.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(json1.getA());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(json1.getB());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(json1.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取第二种json. key:value形式.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;======获取第二种json. key:value形式：&quot;&lt;/span&gt;+dataJson.get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将获取的值解析为Json对象.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    JsonObject jsonObject2 = (JsonObject) &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JsonParser().parse(dataJson.get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 映射为对象.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Json1 json11 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Gson().fromJson(jsonObject2.get(&lt;span class=&quot;string&quot;&gt;&quot;json1&quot;&lt;/span&gt;), Json1.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(json11.getA());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(json11.getB());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(json11.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取第三种json：json数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;======获取第三种json：json数组：&quot;&lt;/span&gt;+dataJson.get(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    JsonObject jsonObject3 = (JsonObject) &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JsonParser().parse(dataJson.get(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;).toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;Json1&amp;gt; json1List = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Gson().fromJson(jsonObject3.get(&lt;span class=&quot;string&quot;&gt;&quot;jsonArray&quot;&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TypeToken&amp;lt;List&amp;lt;Json1&amp;gt;&amp;gt;() &amp;#123;&amp;#125;.getType());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; json1List.size(); i ++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(json1List.get(i).getA()+&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;+json1List.get(i).getB());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java笔记" scheme="https://zrxjuly.github.io/categories/Java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="json解析" scheme="https://zrxjuly.github.io/tags/json%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>开启我的另一种生活</title>
    <link href="https://zrxjuly.github.io/2018-09/second-life-start/"/>
    <id>https://zrxjuly.github.io/2018-09/second-life-start/</id>
    <published>2018-09-30T06:11:21.000Z</published>
    <updated>2020-02-23T14:23:09.385Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018-09/second-life-start/school.jpg" alt="blog picture"></p><blockquote><p>人生的道路虽然漫长，但紧要之处往往只有几步，特别是当人年轻的时候。没有一个人的生活道路是笔直的、没有岔道的。有些岔道口，譬如政治上的岔道口，事业上的岔道口，个人生活上的岔道口，你走错一步，可以影响人生的一个时期，也可以影响一生。————柳青</p></blockquote><p>&emsp;&emsp;读路遥的《人生》，序言中引用的柳青的这段话让我很受感触，摘抄下来。人生真的是很奇妙，对吧？有时当我身旁寂静无人的时候，心底总是会不由自主地思考一些关于自己的源和终的问题，我是谁？我在哪儿？我在干什么？我的未来会是什么样子？未来的我会有大作为吗？谁将与我共度余生？我老了会是什么样子？死后呢？我死后还会有思想吗？人的思想应是出生时就被赋予，有没有想过，死后，当然肉体是归于尘土，但你的思想呢？精神呢？是否也随肉体长埋地下？一系列的问题又将自己带入了迷茫的状态。未来的一切，都是那么扑朔迷离，吊人胃口，让人期待。每次这样问自己的时候，不知道哪里的强大的力量，总是会告诉自己，我的人生注定是不平凡的，总觉得自己肯定会做出一些“惊天动地”的事情。<br>&emsp;&emsp;然而，事实上，现在的我并没有什么大作为，没有做一些对社会有突出贡献、惊天动地之事让众人知道自己，记住自己的名字，也并没有实现自己的人生价值，虽然自己也不知道怎样才算是实现了自己的人生价值。我现在21岁，其实这个年纪算是我人生的一个转折点，我知道在我21岁这个人生岔道口上，我走的每一步，做出的每一个选择，都会对我以后的人生产生很大影响。</p><a id="more"></a><p>&emsp;&emsp;想起了去年年底学期末，一七年的10-11月份，那时还在校，自己一直纠结考研还是工作的问题。考研，也忘记了是什么时候开始有的这个打算，应该是刚入学的时候，因为自己的不甘心，先是报了自考班，之后在课上老师也鼓励我们考研，所以这个想法在心中扎根，一直到现在。当时加了好多考研群，也面临选专业、选学校。专业不用纠结，软件工程，是自己喜欢的。学校的话当时也不知道怎么选择，各方面优劣，当时都想把研招网上的一些学校的报录比等信息爬出来，不过并没有，当时应该是忙着考试，也搁置了，之后也很快定好了学校。前期工作准备好了，自己又纠结，如果我选择考研，那么我将近一年不会工作，肯定也不可能住在家里，考虑到租金、日常生活等资金方面，是很大的问题。再有，努力了一年，考上了还好，但是如果得不到我想要的结果怎么办？那么我还得面临找工作，一年，技术更新的太快了，那个时候我都不知道落后到哪里去了，想想也害怕。工作，可以赚钱，可以学到新技术，可以认识新同事，更能够锻炼自己，但是，梦想就此搁置，不甘心啊。也许你会说可以边工作边考研啊，但是怕自己没有那么多精力，赔了夫人又折兵。想了很久，其实心中也早已有了答案，但是还是左右摇摆不定。咨询老师，帮我分析，一方面，现在复习，战线会拉的太长，到最后关头或许就厌了；另一方面，实习能够学到很多东西，怕我失去这次锻炼自己的机会，先等工作稳定，说不定两方面都能兼顾了呢？嗯，心中的答案更加坚定了，工作吧。<br>&emsp;&emsp;年底开始找工作，写简历，投简历，回应的却很少，打电话邀请面试的却是很多的，不过全部都是培训公司，自己当时却是没经验，分不清，傻傻的面试了几家，不过长经验了。同学也是，好多都是培训公司打来的电话，在这里就想吐槽一下，培训公司借着招人的名义，约面试，最后让你培训，真的是很不靠谱了。就这样，年前就面试了几家培训公司，放弃找工作，回家，开开心心的过最后一个寒假。年后初六离家去找工作，在这里感谢我找工作期间收留我的好姐妹。第六天收到第一个面试邀请，第九天正式上班。第一次找工作还算顺利，对口，待遇不错，老板同事也都很好，入职后，每天都很充实，对未来充满期待，但到第三个月，安排了自己并不太喜欢的工作，与自己之前面试时候的工作不同，而且一干就是三四个月，开始着与自己职业规划不符的工作，心里落差挺大的，对当时的工作，甚至对当时的自己越来越厌恶，终于，七月下旬的时候，我提出了离职，没有一丝犹豫。离职的原因无非就三点：1.不喜欢当时的工作；2.不喜欢当时烦躁无味的生活；3.想要去追求自己的梦想，不想自己的人生就这样度过了。像《谁动了我的奶酪》中的唧唧一样，感受到变化后，应该正确的对自己的变化做出正确的应对，所以，我做出了人生中一个重要的且正确的决定。<br>&emsp;&emsp;做完交接工作后，9月上旬才正式离职，其实那一个多月的时间也是够痛苦的，这期间也对一些人从最初的崇拜到无感再到失望，最后到绝望。前段时间看到过一篇文章，大体是说离职的时候可以检验人品，嗯，有点道理。总之一句话，离职挺难的。工作那半年自己尽自己最大努力工作，也无憾了。<br>&emsp;&emsp;下面才进入正题，前面算是对自己上半年的一个总结吧。9月中旬，开始自己的新生活，一切都是未知的，只有自己清晰的目标和方向。投简历，重新找工作。然而，这次找工作并没有那么顺利，前后二十多天才把工作定下来，不过，只要是自己喜欢的，晚一点也没有关系。现在工作了已有一周时间，有压力，就会有动力，很充实，未来可期，要一直一直好好努力！<br>就先写这么多了吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018-09/second-life-start/school.jpg&quot; alt=&quot;blog picture&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生的道路虽然漫长，但紧要之处往往只有几步，特别是当人年轻的时候。没有一个人的生活道路是笔直的、没有岔道的。有些岔道口，譬如政治上的岔道口，事业上的岔道口，个人生活上的岔道口，你走错一步，可以影响人生的一个时期，也可以影响一生。————柳青&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;读路遥的《人生》，序言中引用的柳青的这段话让我很受感触，摘抄下来。人生真的是很奇妙，对吧？有时当我身旁寂静无人的时候，心底总是会不由自主地思考一些关于自己的源和终的问题，我是谁？我在哪儿？我在干什么？我的未来会是什么样子？未来的我会有大作为吗？谁将与我共度余生？我老了会是什么样子？死后呢？我死后还会有思想吗？人的思想应是出生时就被赋予，有没有想过，死后，当然肉体是归于尘土，但你的思想呢？精神呢？是否也随肉体长埋地下？一系列的问题又将自己带入了迷茫的状态。未来的一切，都是那么扑朔迷离，吊人胃口，让人期待。每次这样问自己的时候，不知道哪里的强大的力量，总是会告诉自己，我的人生注定是不平凡的，总觉得自己肯定会做出一些“惊天动地”的事情。&lt;br&gt;&amp;emsp;&amp;emsp;然而，事实上，现在的我并没有什么大作为，没有做一些对社会有突出贡献、惊天动地之事让众人知道自己，记住自己的名字，也并没有实现自己的人生价值，虽然自己也不知道怎样才算是实现了自己的人生价值。我现在21岁，其实这个年纪算是我人生的一个转折点，我知道在我21岁这个人生岔道口上，我走的每一步，做出的每一个选择，都会对我以后的人生产生很大影响。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://zrxjuly.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="我的21岁" scheme="https://zrxjuly.github.io/tags/%E6%88%91%E7%9A%8421%E5%B2%81/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL学习笔记（一）——PostgreSQL介绍</title>
    <link href="https://zrxjuly.github.io/2018-09/postgresql-1/"/>
    <id>https://zrxjuly.github.io/2018-09/postgresql-1/</id>
    <published>2018-09-25T14:40:55.000Z</published>
    <updated>2020-02-23T14:23:09.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PostgreSQL介绍"><a href="#PostgreSQL介绍" class="headerlink" title="PostgreSQL介绍"></a>PostgreSQL介绍</h2><p>PostgreSQL是一个开源对象关系数据库管理系统（ORDBMS）；用于安全地存储数据；支持最佳做法，并允许在处理请求时检索它们。PostgreSQL是跨平台的，可以在许多操作系统上运行。</p><h2 id="PostgreSQL特点："><a href="#PostgreSQL特点：" class="headerlink" title="PostgreSQL特点："></a>PostgreSQL特点：</h2><ul><li>可在所有主要操作系统上运行；</li><li>PostgreSQL支持文本、图像、声音和视频，并包括用于C/C++,Java,Python,Ruby和开发数据库链接(ODBC)的编程接口。</li><li>PostgreSQL支持SQL的许多功能，例如复杂SQL查询，SQL子选择，外键，触发器，视图，事务，多进程并发控制（MVCC），流式复制，热备。</li><li>在PostgreSQL中，表可以设置为从“父”表继承其特性</li><li>可以安装多个扩展以向PostgreSQL添加附加功能。</li></ul><h2 id="PostgreSQL数据类型"><a href="#PostgreSQL数据类型" class="headerlink" title="PostgreSQL数据类型"></a>PostgreSQL数据类型</h2><blockquote><p><strong><em>数据类型</em></strong> 指定要在表字段中存储哪种类型的数据。在创建表时，对于每列必须使用数据类型。<br>三种主要的数据类型：</p></blockquote><ul><li>数值</li><li>字符串</li><li>日期/时间 </li></ul><h3 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h3><p>数字数据类型用于指定表中的数字数据。</p><table><thead><tr><th>名称</th><th>描述</th><th>存储大小</th></tr></thead><tbody><tr><td>smallint</td><td>存储整数，小范围</td><td>2字节</td></tr><tr><td>integer</td><td>存储整数，使用这个类型可存储典型的整数</td><td>4字节</td></tr><tr><td>bigint</td><td>存储整数，大范围</td><td>8字节</td></tr><tr><td>decimal</td><td>用户指定的精度，精确</td><td>变量</td></tr><tr><td>numeric</td><td>用户指定的精度，精确</td><td>变量</td></tr><tr><td>real</td><td>可变精度，不精确</td><td>4字节</td></tr><tr><td>double</td><td>可变精度，不精确</td><td>8字节</td></tr><tr><td>serial</td><td>自动递增整数</td><td>4字节</td></tr><tr><td>bigserial</td><td>达到自动递增整数</td><td>8字节</td></tr></tbody></table><a id="more"></a><h3 id="字符串数据类型"><a href="#字符串数据类型" class="headerlink" title="字符串数据类型"></a>字符串数据类型</h3><p>String数据类型用于标识字符串类型值。</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>char(size)</td><td>size：要存储的字符数。固定长度字符串，右边的空格填充到相等大小的字符</td></tr><tr><td>character(size)</td><td>size：要存储的字符数。固定长度字符串，右边的空格填充到相等大小的字符</td></tr><tr><td>varchar(size)</td><td>size：要存储的字符数。可变长度字符串。</td></tr><tr><td>character varying(size)</td><td>size：要存储的字符数。可变长度字符串。</td></tr><tr><td>text</td><td>可变长度字符串。</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PostgreSQL介绍&quot;&gt;&lt;a href=&quot;#PostgreSQL介绍&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL介绍&quot;&gt;&lt;/a&gt;PostgreSQL介绍&lt;/h2&gt;&lt;p&gt;PostgreSQL是一个开源对象关系数据库管理系统（ORDBMS）；用于安全地存储数据；支持最佳做法，并允许在处理请求时检索它们。PostgreSQL是跨平台的，可以在许多操作系统上运行。&lt;/p&gt;
&lt;h2 id=&quot;PostgreSQL特点：&quot;&gt;&lt;a href=&quot;#PostgreSQL特点：&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL特点：&quot;&gt;&lt;/a&gt;PostgreSQL特点：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可在所有主要操作系统上运行；&lt;/li&gt;
&lt;li&gt;PostgreSQL支持文本、图像、声音和视频，并包括用于C/C++,Java,Python,Ruby和开发数据库链接(ODBC)的编程接口。&lt;/li&gt;
&lt;li&gt;PostgreSQL支持SQL的许多功能，例如复杂SQL查询，SQL子选择，外键，触发器，视图，事务，多进程并发控制（MVCC），流式复制，热备。&lt;/li&gt;
&lt;li&gt;在PostgreSQL中，表可以设置为从“父”表继承其特性&lt;/li&gt;
&lt;li&gt;可以安装多个扩展以向PostgreSQL添加附加功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;PostgreSQL数据类型&quot;&gt;&lt;a href=&quot;#PostgreSQL数据类型&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL数据类型&quot;&gt;&lt;/a&gt;PostgreSQL数据类型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;数据类型&lt;/em&gt;&lt;/strong&gt; 指定要在表字段中存储哪种类型的数据。在创建表时，对于每列必须使用数据类型。&lt;br&gt;三种主要的数据类型：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;数值&lt;/li&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;li&gt;日期/时间 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;数值数据类型&quot;&gt;&lt;a href=&quot;#数值数据类型&quot; class=&quot;headerlink&quot; title=&quot;数值数据类型&quot;&gt;&lt;/a&gt;数值数据类型&lt;/h3&gt;&lt;p&gt;数字数据类型用于指定表中的数字数据。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;存储大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;smallint&lt;/td&gt;
&lt;td&gt;存储整数，小范围&lt;/td&gt;
&lt;td&gt;2字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;存储整数，使用这个类型可存储典型的整数&lt;/td&gt;
&lt;td&gt;4字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;td&gt;存储整数，大范围&lt;/td&gt;
&lt;td&gt;8字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;decimal&lt;/td&gt;
&lt;td&gt;用户指定的精度，精确&lt;/td&gt;
&lt;td&gt;变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;用户指定的精度，精确&lt;/td&gt;
&lt;td&gt;变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;real&lt;/td&gt;
&lt;td&gt;可变精度，不精确&lt;/td&gt;
&lt;td&gt;4字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;可变精度，不精确&lt;/td&gt;
&lt;td&gt;8字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serial&lt;/td&gt;
&lt;td&gt;自动递增整数&lt;/td&gt;
&lt;td&gt;4字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bigserial&lt;/td&gt;
&lt;td&gt;达到自动递增整数&lt;/td&gt;
&lt;td&gt;8字节&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="PostgreSQL" scheme="https://zrxjuly.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="https://zrxjuly.github.io/tags/PostgreSQL/"/>
    
      <category term="数据库" scheme="https://zrxjuly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode之数据结构——数组demo2</title>
    <link href="https://zrxjuly.github.io/2018-09/data-structure-array-LargestNumber/"/>
    <id>https://zrxjuly.github.io/2018-09/data-structure-array-LargestNumber/</id>
    <published>2018-09-01T01:10:22.000Z</published>
    <updated>2020-02-23T14:23:09.379Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018-09/data-structure-array-LargestNumber/1.jpg" alt="data structure picture"> </p><blockquote><p><strong><em>Coding Question:</em></strong><br>In a given integer array nums, there is always exactly one largest element.<br>Find whether the largest element in the array is at least twice as much as every other number in the array.<br>If it is, return the index of the largest element, otherwise return -1.<br><strong><em>编程题：</em></strong><br>给定一个数组，总是存在一个最大元素。查找数组中的最大元素，该元素是否至少是数组中其他每个元素的两倍。如果是，返回最大元素的索引，否则返回-1。<br><strong><em>思路：</em></strong></p></blockquote><ul><li>首先，将给定数组中最大的元素查询出来</li><li>然后，遍历数组中的元素，比较数组中最大元素是否大于或等于除最大元素的其他每个元素的两倍 </li></ul><a id="more"></a><p>下面看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zrxjuly.ds.arrayandstring.demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zrxJuly</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LargestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nums[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> result = largestNum(nums);</span><br><span class="line">        System.out.println(<span class="string">"The result number is:"</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">largestNum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 假定数组中最大的数为数组的第一个数.</span></span><br><span class="line">        <span class="keyword">int</span> maxNum = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 第一个数的下标值.</span></span><br><span class="line">        <span class="keyword">int</span> maxNumIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 先找出数组中最大的数.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; nums.length; m ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> n = m; n &lt; nums.length; n ++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[n] &gt; maxNum) &#123;</span><br><span class="line">                    maxNum = nums[n];</span><br><span class="line">                    maxNumIndex = n;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出查看遍历后的最大数与最大数的下标.</span></span><br><span class="line">        System.out.println(<span class="string">"maxNum:"</span>+maxNum);</span><br><span class="line">        System.out.println(<span class="string">"maxIndex:"</span>+maxNumIndex);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历数组，判断数组内某个元素值*2是否小于或等于maxNum，是：返回maxIndex，否：返回-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == maxNumIndex) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] * <span class="number">2</span> &gt; maxNum) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxNumIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018-09/data-structure-array-LargestNumber/1.jpg&quot; alt=&quot;data structure picture&quot;&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Coding Question:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;In a given integer array nums, there is always exactly one largest element.&lt;br&gt;Find whether the largest element in the array is at least twice as much as every other number in the array.&lt;br&gt;If it is, return the index of the largest element, otherwise return -1.&lt;br&gt;&lt;strong&gt;&lt;em&gt;编程题：&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;给定一个数组，总是存在一个最大元素。查找数组中的最大元素，该元素是否至少是数组中其他每个元素的两倍。如果是，返回最大元素的索引，否则返回-1。&lt;br&gt;&lt;strong&gt;&lt;em&gt;思路：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先，将给定数组中最大的元素查询出来&lt;/li&gt;
&lt;li&gt;然后，遍历数组中的元素，比较数组中最大元素是否大于或等于除最大元素的其他每个元素的两倍 &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://zrxjuly.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="LeetCode" scheme="https://zrxjuly.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LeetCode/"/>
    
    
      <category term="data structure" scheme="https://zrxjuly.github.io/tags/data-structure/"/>
    
      <category term="LeetCode" scheme="https://zrxjuly.github.io/tags/LeetCode/"/>
    
      <category term="array" scheme="https://zrxjuly.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode之数据结构——数组</title>
    <link href="https://zrxjuly.github.io/2018-08/data-structure-array/"/>
    <id>https://zrxjuly.github.io/2018-08/data-structure-array/</id>
    <published>2018-08-21T05:00:04.000Z</published>
    <updated>2020-02-23T14:23:09.347Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018-08/data-structure-array/data-structure.jpg" alt="data structure picture"> </p><blockquote><p>从今天开始刷LeetCode，目标：每周至少刷一个Coding Question，出一篇data structure学习博文进行总结。Fighting！<br>解出的代码案例也都会在我的<a href="https://github.com/zrxJuly" target="_blank" rel="noopener">GitHub</a>上进行维护。如果觉得对您有帮助，欢迎star or fork~<br>附上GitHub项目地址：<a href="https://github.com/zrxJuly/dataStructure" target="_blank" rel="noopener">https://github.com/zrxJuly/dataStructure</a>。<br>本文首发于我的个人博客：<a href="https://zrxjuly.github.io/">zrxJuly’s Blog</a>，欢迎访问，Let’s study together.</p></blockquote><h2 id="数组简介"><a href="#数组简介" class="headerlink" title="数组简介"></a>数组简介</h2><p>&emsp;&emsp;数组是数据结构中的基本模块之一，因为字符串是由字符数组形成的，所以二者是相似的。<br>数组是一种基本的数据结构，用于按顺序存储元素集合，数组中的每个元素都可以通过数组索引来识别，元素可以随机存取。数组可以有一个或多个维度，<br>&emsp;&emsp; <strong>一维数组</strong>：也叫线性数组。数组具有固定的容量，我们需要在初始化时指定数组的大小。然而这种在初始化时指定数组大小的方法会很不方便甚至可能会造成浪费。</p><a id="more"></a><h3 id="Array-Demo学习"><a href="#Array-Demo学习" class="headerlink" title="Array Demo学习"></a>Array Demo学习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zrxjuly.ds.arrayandstring.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 数组的基本用法.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arrayTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. Initialize.初始化数组.</span></span><br><span class="line">        <span class="keyword">int</span>[] a0 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span>[] a1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">        <span class="comment">// 2. Get Length.输出数组长度.</span></span><br><span class="line">        System.out.println(<span class="string">"The size of a1 is: "</span> + a1.length);</span><br><span class="line">        <span class="comment">// 3. Access Element.访问数组元素.</span></span><br><span class="line">        System.out.println(<span class="string">"The first element is: "</span> + a1[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 4. Iterate all Elements.遍历所有元素，两个for循环，两种遍历方法.</span></span><br><span class="line">        System.out.print(<span class="string">"[Version 1] The contents of a1 are:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a1.length; ++i) &#123;</span><br><span class="line">            System.out.print(<span class="string">" "</span> + a1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">"[Version 2] The contents of a1 are:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> item : a1) &#123;</span><br><span class="line">            System.out.print(<span class="string">" "</span> + item);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 5. Modify Element.修改指定下标的数组元素.</span></span><br><span class="line">        a1[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">        <span class="comment">// 6. Sort.对数组进行排序.</span></span><br><span class="line">        Arrays.sort(a1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        arrayTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态数组简介"><a href="#动态数组简介" class="headerlink" title="动态数组简介"></a>动态数组简介</h2><p><strong>动态数组</strong>：是大小可变的随机存取的列表数据结构。大多数编程语言都会提供内置的动态数组。eg：在C++中的vector，Java中的ArrayList。</p><h3 id="Dynamic-Array-Demo-学习"><a href="#Dynamic-Array-Demo-学习" class="headerlink" title="Dynamic Array Demo 学习"></a>Dynamic Array Demo 学习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zrxjuly.ds.arrayandstring.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 动态数组</span></span><br><span class="line"><span class="comment"> *   大小可变的随机存取的列表数据结构.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dynamicArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 集合初始化.</span></span><br><span class="line">        List&lt;Integer&gt; v0 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; v1;</span><br><span class="line">        <span class="comment">// 声明并赋值数组.</span></span><br><span class="line">        Integer[] a = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="comment">// Arrays.asList()方法：将数组转化为List，该方法将数组与列表链接起来，当更新其中一个时，另一个也会更新.</span></span><br><span class="line">        v1 = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(a));</span><br><span class="line">        <span class="comment">// 3. 将v1数组赋值给v2</span></span><br><span class="line">        List&lt;Integer&gt; v2 = v1;                      <span class="comment">// another reference to v1</span></span><br><span class="line">        List&lt;Integer&gt; v3 = <span class="keyword">new</span> ArrayList&lt;&gt;(v1);     <span class="comment">// make an actual copy of v1</span></span><br><span class="line">        <span class="comment">// 3. get length</span></span><br><span class="line">        System.out.println(<span class="string">"The size of v1 is: "</span> + v1.size());;</span><br><span class="line">        <span class="comment">// 4. access element</span></span><br><span class="line">        System.out.println(<span class="string">"The first element in v1 is: "</span> + v1.get(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 5. iterate the vector.下面两种方法遍历集合内容.</span></span><br><span class="line">        System.out.print(<span class="string">"[Version 1] The contents of v1 are:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v1.size(); i ++) &#123;</span><br><span class="line">            System.out.print(<span class="string">" "</span> + v1.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">"[Version 2] The contents of v1 are:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> item : v1) &#123;</span><br><span class="line">            System.out.print(<span class="string">" "</span> + item);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 6. modify element.修改元素，注意：v1使用Arrays.asList()方法赋值，因此v2中的元素修改后，v1也会修改</span></span><br><span class="line">        v2.set(<span class="number">0</span>, <span class="number">5</span>);       <span class="comment">// modify v2 will actually modify v1</span></span><br><span class="line">        System.out.println(<span class="string">"The first element in v1 is: "</span> + v1.get(<span class="number">0</span>));</span><br><span class="line">        v3.set(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"The first element in v1 is: "</span> + v1.get(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 7. sort. 对集合进行排序</span></span><br><span class="line">        Collections.sort(v1);</span><br><span class="line">        <span class="comment">// 8. add new element at the end of the vector</span></span><br><span class="line">        v1.add(-<span class="number">1</span>);</span><br><span class="line">        System.out.print(<span class="string">"[Version 2] The contents of v1 are:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> item : v1) &#123;</span><br><span class="line">            System.out.print(<span class="string">" "</span> + item);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        v1.add(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.print(<span class="string">"[Version 2] The contents of v1 are:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> item : v1) &#123;</span><br><span class="line">            System.out.print(<span class="string">" "</span> + item);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 9. delete the last element</span></span><br><span class="line">        v1.remove(v1.size() - <span class="number">1</span>);</span><br><span class="line">        System.out.print(<span class="string">"[Version 2] The contents of v1 are:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> item : v1) &#123;</span><br><span class="line">            System.out.print(<span class="string">" "</span> + item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        dynamicArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Coding-Question-寻找数组的中心索引"><a href="#Coding-Question-寻找数组的中心索引" class="headerlink" title="Coding Question:寻找数组的中心索引"></a>Coding Question:寻找数组的中心索引</h2><p>该Coding Question是LeetCode上数组模块的第一个编程问题。这里展示了两种解题思路及方法：<br><strong><em>思路一</em></strong><br>目标索引的左侧的数的总和 = 目标索引的右侧的数的总和。<br><strong><em>思路二</em></strong><br>左侧及索引对应的数 的总和+索引对应的数 = 总和-左侧及索引对应的数的总和+索引对应的数。</p><p><strong>详细分析请看代码及注释，或访问：<a href="https://github.com/zrxJuly/dataStructure" target="_blank" rel="noopener">https://github.com/zrxJuly/dataStructure</a></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zrxjuly.ds.arrayandstring.demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: zrxJuly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018-8-21 17:00:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Desription</span>: Find Pivot Index. 寻找数组的中心索引。</span></span><br><span class="line"><span class="comment"> *   Coding Question:</span></span><br><span class="line"><span class="comment"> *       Given an array of integers nums, write a method that returns the "pivot" index of this array.</span></span><br><span class="line"><span class="comment"> *       We define the pivot index as the index where the sum of the numbers to the left of the index </span></span><br><span class="line"><span class="comment"> *       is equal to the sum of the numbers to the right of the index.</span></span><br><span class="line"><span class="comment"> *       If no such index exists, we should return -1. </span></span><br><span class="line"><span class="comment"> *       If there are multiple pivot indexes, you should return the left-most pivot index.</span></span><br><span class="line"><span class="comment"> *   |-题目：寻找数组的中心索引。</span></span><br><span class="line"><span class="comment"> *       给定一个整数类型的数组，编写一个返回数组中心索引的方法。</span></span><br><span class="line"><span class="comment"> *       数组中心索引的定义：索引左侧的数的总和 = 索引右侧的数的总和。</span></span><br><span class="line"><span class="comment"> *       如果不存在这样的索引，返回-1.</span></span><br><span class="line"><span class="comment"> *       如果存在多个中心索引，应该返回最左侧的中心索引。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindPivotIndex</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution 1.</span></span><br><span class="line"><span class="comment">     * |-思路分析：目标索引的左侧的数的总和 = 目标索引的右侧的数的总和.</span></span><br><span class="line"><span class="comment">     *     数组：[1, 7, 3, 6, 5, 6 ]</span></span><br><span class="line"><span class="comment">     *           |______|  | |___|</span></span><br><span class="line"><span class="comment">     *              |      |   |</span></span><br><span class="line"><span class="comment">     *              A      B   C </span></span><br><span class="line"><span class="comment">     *     假设 A：目标索引左侧的总和，C:目标索引右侧总和，B：目标索引对应的数值.</span></span><br><span class="line"><span class="comment">     *     则 若有：A = C， 符合题意，返回B的索引，否则返回-1.</span></span><br><span class="line"><span class="comment">     * |- 分别声明左侧总和numsLeft 以及 右侧总和numsRight 两个变量，for循环分别遍历两侧元素，最后比较是否相等.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pivotIndexSolution1</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 声明左侧变量.</span></span><br><span class="line">            <span class="keyword">int</span> numsLeft = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 声明右侧变量.</span></span><br><span class="line">            <span class="keyword">int</span> numsRight = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遍历i左侧元素，值相加.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; i; m++) &#123;</span><br><span class="line">                numsLeft += nums[m];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历i右侧元素，值相加.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> n = nums.length - <span class="number">1</span>; n &gt; i; n--) &#123;</span><br><span class="line">                numsRight += nums[n];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若左侧值和右侧值相等，返回i值.</span></span><br><span class="line">            <span class="keyword">if</span> (numsLeft == numsRight) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution 2.</span></span><br><span class="line"><span class="comment">     * |-思路分析：左侧及索引对应的数 的总和+索引对应的数 = 总和-左侧及索引对应的数的总和+索引对应的数.</span></span><br><span class="line"><span class="comment">     *   |-下面这样解释更容易理解：</span></span><br><span class="line"><span class="comment">     *     数组：[1, 7, 3, 6, 5, 6 ]</span></span><br><span class="line"><span class="comment">     *           |______|  | |___|</span></span><br><span class="line"><span class="comment">     *              |      |   |</span></span><br><span class="line"><span class="comment">     *              A      B   C </span></span><br><span class="line"><span class="comment">     *     假设 A：目标索引左侧的总和，C:目标索引右侧总和，B：目标索引对应的数值.</span></span><br><span class="line"><span class="comment">     *     则 若有：A + B = B + C，即 A = C， 符合题意，返回B的索引，否则返回-1.</span></span><br><span class="line"><span class="comment">     *     </span></span><br><span class="line"><span class="comment">     *   |-下面代码中是这样判断的：</span></span><br><span class="line"><span class="comment">     *     分别声明两个变量：数组总和sum 以及 数组左侧总和 lsum</span></span><br><span class="line"><span class="comment">     *     先用for循环遍历得出数组总和sum，然后再写一个for循环，在该循环内判断左侧总和lsum是否和右侧总和相等。</span></span><br><span class="line"><span class="comment">     *     (注：本例中lsum包含了目标索引的值，因此在判断的时候右侧总和也必须加上目标索引的值)</span></span><br><span class="line"><span class="comment">     *     </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pivotIndexSolution2</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="comment">// 数组总和.</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 数组左侧数的总和.</span></span><br><span class="line">        <span class="keyword">int</span> lsum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 得出数组总和.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:nums)&#123;</span><br><span class="line">            sum+=x;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            lsum += nums[i];</span><br><span class="line">            <span class="comment">// 判断：左侧总和 == 右侧总和</span></span><br><span class="line">            <span class="keyword">if</span>(lsum == sum - lsum + nums[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Initialize.初始化数组.</span></span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//        int[] nums = &#123;-1,-1,-1,0,1,1&#125;;</span></span><br><span class="line">        <span class="comment">// 调用方法一：</span></span><br><span class="line">        <span class="keyword">int</span> result1 = pivotIndexSolution1(nums);</span><br><span class="line">        System.out.println(<span class="string">"The first method result is:"</span> + result1);</span><br><span class="line">        <span class="comment">// 调用方法二：</span></span><br><span class="line">        <span class="keyword">int</span> result2 = pivotIndexSolution2(nums);</span><br><span class="line">        System.out.println(<span class="string">"The second method result is:"</span> + result2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018-08/data-structure-array/data-structure.jpg&quot; alt=&quot;data structure picture&quot;&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从今天开始刷LeetCode，目标：每周至少刷一个Coding Question，出一篇data structure学习博文进行总结。Fighting！&lt;br&gt;解出的代码案例也都会在我的&lt;a href=&quot;https://github.com/zrxJuly&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;上进行维护。如果觉得对您有帮助，欢迎star or fork~&lt;br&gt;附上GitHub项目地址：&lt;a href=&quot;https://github.com/zrxJuly/dataStructure&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/zrxJuly/dataStructure&lt;/a&gt;。&lt;br&gt;本文首发于我的个人博客：&lt;a href=&quot;https://zrxjuly.github.io/&quot;&gt;zrxJuly’s Blog&lt;/a&gt;，欢迎访问，Let’s study together.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数组简介&quot;&gt;&lt;a href=&quot;#数组简介&quot; class=&quot;headerlink&quot; title=&quot;数组简介&quot;&gt;&lt;/a&gt;数组简介&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;数组是数据结构中的基本模块之一，因为字符串是由字符数组形成的，所以二者是相似的。&lt;br&gt;数组是一种基本的数据结构，用于按顺序存储元素集合，数组中的每个元素都可以通过数组索引来识别，元素可以随机存取。数组可以有一个或多个维度，&lt;br&gt;&amp;emsp;&amp;emsp; &lt;strong&gt;一维数组&lt;/strong&gt;：也叫线性数组。数组具有固定的容量，我们需要在初始化时指定数组的大小。然而这种在初始化时指定数组大小的方法会很不方便甚至可能会造成浪费。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://zrxjuly.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="LeetCode" scheme="https://zrxjuly.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LeetCode/"/>
    
    
      <category term="data structure" scheme="https://zrxjuly.github.io/tags/data-structure/"/>
    
      <category term="LeetCode" scheme="https://zrxjuly.github.io/tags/LeetCode/"/>
    
      <category term="array" scheme="https://zrxjuly.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>Redis系列（三）——Redis键命令(key)</title>
    <link href="https://zrxjuly.github.io/2018-08/redis-study-3/"/>
    <id>https://zrxjuly.github.io/2018-08/redis-study-3/</id>
    <published>2018-08-18T02:22:30.000Z</published>
    <updated>2020-03-03T04:36:22.309Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018-08/redis-study-3/redis-3.jpg" alt="blog picture"></p><blockquote><p>Redis 键命令用于管理Redis的键。  </p></blockquote><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command keyName</span><br></pre></td></tr></table></figure><p>以下列举部分常用的Redis键命令：</p><h3 id="DEL-key"><a href="#DEL-key" class="headerlink" title="DEL key"></a>DEL key</h3><blockquote><p>删除已存在的key。不存在的key则会被忽略。  </p></blockquote><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEL keyName</span><br></pre></td></tr></table></figure><p>返回值：<code>被删除key的数量。</code><br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name &quot;zrx&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;zrx&quot;</span><br><span class="line">127.0.0.1:6379&gt; del name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h3 id="DUMP-key"><a href="#DUMP-key" class="headerlink" title="DUMP key"></a>DUMP key</h3><blockquote><p>序列化给定的key并返回序列化之后的值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name zrxJuly</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;zrxJuly&quot;</span><br><span class="line">127.0.0.1:6379&gt; dump name</span><br><span class="line">&quot;\x00\azrxJuly\t\x00\\\xb5\xa0\xd4;wR\xbf&quot;</span><br></pre></td></tr></table></figure><h3 id="EXISTS-key"><a href="#EXISTS-key" class="headerlink" title="EXISTS key"></a>EXISTS key</h3><blockquote><p>用于检查指定的key是否存在。  </p></blockquote><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXISTS keyName</span><br></pre></td></tr></table></figure><p>返回值：key存在返回1，否则返回0。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name &quot;a&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; del name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="EXPIRE-key-seconds"><a href="#EXPIRE-key-seconds" class="headerlink" title="EXPIRE key seconds"></a>EXPIRE key seconds</h3><blockquote><p>设置key的过期时间。key过期后将不再可用，⚠️此处过期时间单位为秒（s）。</p></blockquote><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expire key seconds</span><br></pre></td></tr></table></figure><p>返回值：设置成功返回1，key不存在或不能为key设置过期时间时返回0。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire name 20</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h3 id="PEXPIRE-key-milliseconds"><a href="#PEXPIRE-key-milliseconds" class="headerlink" title="PEXPIRE key milliseconds"></a>PEXPIRE key milliseconds</h3><blockquote><p>PEXPIRE命令的功能和EXPIRE基本一致，⚠️此处过期时间单位为毫秒（ms）。</p></blockquote><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PEXPIRE key milliseconds</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pexpire name 6000</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h3 id="TTL-key"><a href="#TTL-key" class="headerlink" title="TTL key"></a>TTL key</h3><blockquote><p>查看一个给定key的有效时间</p></blockquote><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TTL keyName</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;zrxJuly&quot;</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; expire name 5</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) -2</span><br></pre></td></tr></table></figure><p>返回值<code>(integer) -1</code>表示key存在并且没有设置过期时间，<code>(integer) -2</code>表示key不存在或已过期。</p><h3 id="PERSIST-key"><a href="#PERSIST-key" class="headerlink" title="PERSIST key"></a>PERSIST key</h3><blockquote><p>移除给定key的过期时间，使得key永不过期。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PERSIST keyName</span><br></pre></td></tr></table></figure><p>过期时间移除成功时，返回1，key不存在或key没有设置过期时间，返回0。</p><h3 id="RENAME-old-key-new-key"><a href="#RENAME-old-key-new-key" class="headerlink" title="RENAME old_key new_key"></a>RENAME old_key new_key</h3><blockquote><p>修改key的名称。</p></blockquote><p>修改成功时提示OK，失败时返回一个错误。</p><h3 id="TYPE-keyName"><a href="#TYPE-keyName" class="headerlink" title="TYPE keyName"></a>TYPE keyName</h3><blockquote><p>返回key所存储的值的类型。</p></blockquote><p>返回key的数据类型有：</p><ul><li>none ：key不存在</li><li>string：字符串</li><li>list：列表</li><li>set：集合</li><li>zset：有序集</li><li>hash： 哈希表</li></ul><h3 id="keys-pattern"><a href="#keys-pattern" class="headerlink" title="keys pattern"></a>keys pattern</h3><blockquote><p>查找所有符合给定模式的key。</p></blockquote><p>获取redis中所有的key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.redis.net.cn/order/3528.html" target="_blank" rel="noopener">http://www.redis.net.cn/order/3528.html</a><br><a href="https://www.runoob.com/redis/redis-keys.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-keys.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018-08/redis-study-3/redis-3.jpg&quot; alt=&quot;blog picture&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 键命令用于管理Redis的键。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;语法：&quot;&gt;&lt;a href=&quot;#语法：&quot; class=&quot;headerlink&quot; title=&quot;语法：&quot;&gt;&lt;/a&gt;语法：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;command keyName&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;以下列举部分常用的Redis键命令：&lt;/p&gt;
&lt;h3 id=&quot;DEL-key&quot;&gt;&lt;a href=&quot;#DEL-key&quot; class=&quot;headerlink&quot; title=&quot;DEL key&quot;&gt;&lt;/a&gt;DEL key&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;删除已存在的key。不存在的key则会被忽略。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DEL keyName&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;返回值：&lt;code&gt;被删除key的数量。&lt;/code&gt;&lt;br&gt;例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; set name &amp;quot;zrx&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; get name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;zrx&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; del name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(integer) 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; get name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(nil)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;DUMP-key&quot;&gt;&lt;a href=&quot;#DUMP-key&quot; class=&quot;headerlink&quot; title=&quot;DUMP key&quot;&gt;&lt;/a&gt;DUMP key&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;序列化给定的key并返回序列化之后的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; set name zrxJuly&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; get name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;zrxJuly&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; dump name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;\x00\azrxJuly\t\x00\\\xb5\xa0\xd4;wR\xbf&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;EXISTS-key&quot;&gt;&lt;a href=&quot;#EXISTS-key&quot; class=&quot;headerlink&quot; title=&quot;EXISTS key&quot;&gt;&lt;/a&gt;EXISTS key&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;用于检查指定的key是否存在。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EXISTS keyName&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;返回值：key存在返回1，否则返回0。&lt;br&gt;例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; set name &amp;quot;a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; exists name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(integer) 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; del name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(integer) 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; exists name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(integer) 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://zrxjuly.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://zrxjuly.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis系列（二）——Redis数据类型</title>
    <link href="https://zrxjuly.github.io/2018-08/redis-study-2/"/>
    <id>https://zrxjuly.github.io/2018-08/redis-study-2/</id>
    <published>2018-08-17T07:32:33.000Z</published>
    <updated>2020-03-03T03:30:55.454Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018-08/redis-study-2/redis-2.jpg" alt="Redis picture"><br>Redis支持5种数据类型：</p><ul><li>string：字符串</li><li>hash：哈希</li><li>list：列表</li><li>set： 集合</li><li>zset：有序集合（sorted set） </li></ul><h2 id="String：字符串"><a href="#String：字符串" class="headerlink" title="String：字符串"></a>String：字符串</h2><h3 id="概念及基本用法"><a href="#概念及基本用法" class="headerlink" title="概念及基本用法"></a>概念及基本用法</h3><p>string是Redis最基本的类型，一个key对应一个value；<br>string类型是二进制安全的，即Redis的string可包含任何数据。比如jpg图片或者序列化的对象。<br>string类型是Redis最基本的数据类型，string类型的值最大能存储512MB。</p><blockquote><p>语法格式：<br>set key value<br>get key</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name &apos;zrx&apos;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;zrx&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Redis 命令不区分大小写，记录的数据是区分大小写的。上面例子 键为<code>name</code>，值为<code>zrx</code>。使用了set先给name赋值为’zrx’，再使用了get取键对应的值。通常用SET command和GET command来设置和获取字符串值。</p></blockquote><a id="more"></a><h3 id="Redis原子递增"><a href="#Redis原子递增" class="headerlink" title="Redis原子递增"></a>Redis原子递增</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set counter 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr counter</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; incr counter</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p><code>INCR</code> 命令将字符串解析成整型，将其+1，最后将结果保存为新的字符串值。类似命令有<code>INCRBY</code>,<code>DECR</code>,<code>DECRBY</code>.</p><p><code>INCR</code>原子操作，即使多个客户端对同一个key发出INCR命令，也绝不会导致竞争的情况。即不会出现客户端1和2同时读出10，当分别执行INCR时返回的最终肯定是12。</p><p><code>GETSET</code>：为key设置新值并返回原值。用途，例如：每当有新用户访问系统时，用INCR操作一个Redis key。如果希望每小时对这个信息收集一次，就可以用<code>GETSET key value</code>命令来给这个key赋值0并读取原值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set counter 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr counter</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; incr counter</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; incr counter</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; getset counter 0</span><br><span class="line">&quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; get counter</span><br><span class="line">&quot;0&quot;</span><br></pre></td></tr></table></figure><h3 id="对多个key的操作"><a href="#对多个key的操作" class="headerlink" title="对多个key的操作"></a>对多个key的操作</h3><p>为减少等待时间，可以一次存储或获取多个key对应的值，使用<code>MSET</code>和<code>MGET</code>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset a 1 b 2 c 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget a b c</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br></pre></td></tr></table></figure><p><code>MGET</code>命令返回由值组成的数组。</p><h3 id="修改或查询键空间"><a href="#修改或查询键空间" class="headerlink" title="修改或查询键空间"></a>修改或查询键空间</h3><ul><li><code>EXISTS</code>：返回1表示给定key的值存在，返回0表示给定key的值不存在。<br><code>DEL</code>：删除key对应的值，返回1表示被删除(值存在)，返回0表示没被删除(值不存在)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set myblog zrxjuly</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; exists myblog</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; del myblog</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; exists myblog</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><ul><li><code>TYPE</code>命令返回key对应的值的存储类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set myblog zrxjuly</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; type myblog</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; del myblog</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; type myblog</span><br><span class="line">none</span><br></pre></td></tr></table></figure><h3 id="Redis超时"><a href="#Redis超时" class="headerlink" title="Redis超时"></a>Redis超时</h3><p>与值类型无关的Redis特性：超时。可以对key设置一个超时时间，当这个时间到达后会被删除。精度可以使用毫秒或秒。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set key zrxjuly</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire key 5</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get key</span><br><span class="line">&quot;zrxjuly&quot;</span><br><span class="line">127.0.0.1:6379&gt; get key</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p><code>PERSIST</code>：去除超时时间<br><code>SET KEY value EX time</code>：在创建值的时候设置超时时间。<br><code>TTL</code>：查看key对应的值剩余存活时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set myblog zrxjuly ex 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl myblog</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; ttl myblog</span><br><span class="line">(integer) -2</span><br></pre></td></tr></table></figure><h2 id="Hash：哈希"><a href="#Hash：哈希" class="headerlink" title="Hash：哈希"></a>Hash：哈希</h2><p>Hash是键值对集合，类似于java中的Map，适用于存储对象。Redis哈希（散列）是字符串字段和字符串值之间的映射。</p><blockquote><p>语法格式：<br>hmset key field value<br>hget key field</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset myhash field1 &quot;hello&quot; field2 &quot;world&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field1</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field2</span><br><span class="line">&quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; hmset myhash name &quot;zrx&quot; age &quot;twenty&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hget myhash name</span><br><span class="line">&quot;zrx&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget myhash age</span><br><span class="line">&quot;twenty&quot;</span><br></pre></td></tr></table></figure><p>hmset 设置<code>field=&gt;value</code>对，hget获取对应field对应的value。<br>上面例子中<code>field=&gt;value</code>对有：<br><code>field1=&gt;&quot;hello&quot;</code>,<code>field2=&gt;&quot;world&quot;</code>,<code>name=&gt;&quot;zrx&quot;</code>,<code>age=&gt;&quot;twenty&quot;</code>。</p><blockquote><p>每个hash可以存储2<sup>32</sup>-1个键值对。</p></blockquote><p>再看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset userInfo name zrxJuly sex female age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget userInfo name</span><br><span class="line">1) &quot;zrxJuly&quot;</span><br><span class="line">127.0.0.1:6379&gt; hmget userInfo name sex age</span><br><span class="line">1) &quot;zrxJuly&quot;</span><br><span class="line">2) &quot;female&quot;</span><br><span class="line">3) &quot;20&quot;</span><br></pre></td></tr></table></figure><p>上面的例子我们可以理解为userInfo对象有name、sex、age三个属性。<br>同样，对单独的属性，也会有一些操作，如，返回年龄+1后的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hincrby userInfo age 1</span><br><span class="line">(integer) 21</span><br></pre></td></tr></table></figure><h2 id="List：列表"><a href="#List：列表" class="headerlink" title="List：列表"></a>List：列表</h2><p>Redis列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（LEFT）或尾部（RIGHT）。也可以从LIST的头部（LIST）或者尾部（RIGHT）弹出一个元素。<br>Redis列表通过<strong>链接列表</strong>实现。使用<code>LPUSH</code>命令将一个新元素添加到包含10个元素的列表头的速度与向包含1000万个元素的列表头添加元素的速度相同。所以，对于数据库系统来说，能够以非常快的方式将元素添加到一个非常长的列表中是至关重要的。</p><blockquote><p>语法格式：<br>lpush key member</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list1 good</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list1 study</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush list1 up</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 2</span><br><span class="line">1) &quot;up&quot;</span><br><span class="line">2) &quot;study&quot;</span><br><span class="line">3) &quot;good&quot;</span><br></pre></td></tr></table></figure><blockquote><p>列表最大长度为2<sup>32</sup>-1个元素。</p></blockquote><h2 id="Set：集合"><a href="#Set：集合" class="headerlink" title="Set：集合"></a>Set：集合</h2><p>Redis的set是string类型的<strong><em>无序</em></strong> 集合。集合是通过哈希表实现的，因此添加、删除、查找的复杂度都是O(1)。<br><strong><em>sadd命令</em></strong><br>添加一个string元素到key对应的set集合中，成功返回1，元素已在集合中返回0，key对应的set不存在返回错误。</p><blockquote><p>语法格式：sadd key member  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd subject java</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd subject html</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd subject java</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; smembers subject</span><br><span class="line">1) &quot;java&quot;</span><br><span class="line">2) &quot;html&quot;</span><br></pre></td></tr></table></figure><p>值<code>java</code>被添加了两次，但根据集合内元素唯一性，第二次添加的元素将忽略。</p><blockquote><p>集合中最大的成员数为2<sup>32</sup>-1</p></blockquote><h2 id="zset：有序集合（sorted-set）"><a href="#zset：有序集合（sorted-set）" class="headerlink" title="zset：有序集合（sorted set）"></a>zset：有序集合（sorted set）</h2><p>和set一样，也是string类型的元素的集合。zset中的每个元素都会关联一个double类型的分数，zset中成员都是唯一的，但是所关联的分数可以重复.添加元素到集合，若元素在集合中存在则更新对应score。</p><blockquote><p>语法格式<br>zadd key score member  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd zname 0 zs</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd zname 0 ls</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd zname 0 ww</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE zname 0 10</span><br><span class="line">1) &quot;ls&quot;</span><br><span class="line">2) &quot;ww&quot;</span><br><span class="line">3) &quot;zs&quot;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="noopener">http://www.redis.cn/topics/data-types-intro.html#strings</a><br><a href="http://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-install.html</a><br><a href="https://www.yiibai.com/redis/redis_quick_guide.html" target="_blank" rel="noopener">https://www.yiibai.com/redis/redis_quick_guide.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018-08/redis-study-2/redis-2.jpg&quot; alt=&quot;Redis picture&quot;&gt;&lt;br&gt;Redis支持5种数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string：字符串&lt;/li&gt;
&lt;li&gt;hash：哈希&lt;/li&gt;
&lt;li&gt;list：列表&lt;/li&gt;
&lt;li&gt;set： 集合&lt;/li&gt;
&lt;li&gt;zset：有序集合（sorted set） &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;String：字符串&quot;&gt;&lt;a href=&quot;#String：字符串&quot; class=&quot;headerlink&quot; title=&quot;String：字符串&quot;&gt;&lt;/a&gt;String：字符串&lt;/h2&gt;&lt;h3 id=&quot;概念及基本用法&quot;&gt;&lt;a href=&quot;#概念及基本用法&quot; class=&quot;headerlink&quot; title=&quot;概念及基本用法&quot;&gt;&lt;/a&gt;概念及基本用法&lt;/h3&gt;&lt;p&gt;string是Redis最基本的类型，一个key对应一个value；&lt;br&gt;string类型是二进制安全的，即Redis的string可包含任何数据。比如jpg图片或者序列化的对象。&lt;br&gt;string类型是Redis最基本的数据类型，string类型的值最大能存储512MB。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法格式：&lt;br&gt;set key value&lt;br&gt;get key&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; set name &amp;apos;zrx&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; get name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;zrx&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;Redis 命令不区分大小写，记录的数据是区分大小写的。上面例子 键为&lt;code&gt;name&lt;/code&gt;，值为&lt;code&gt;zrx&lt;/code&gt;。使用了set先给name赋值为’zrx’，再使用了get取键对应的值。通常用SET command和GET command来设置和获取字符串值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://zrxjuly.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://zrxjuly.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis系列（一）——Redis安装</title>
    <link href="https://zrxjuly.github.io/2018-08/redis-study-1/"/>
    <id>https://zrxjuly.github.io/2018-08/redis-study-1/</id>
    <published>2018-08-17T03:36:57.000Z</published>
    <updated>2020-03-03T03:30:49.924Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018-08/redis-study-1/redis-1.png" alt="Redis picture"></p><h2 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2><ul><li>Redis是一个开源、高级的键值存储和一个适用的解决方案，用于构建高性能、可扩展的web应用程序，遵循BSD协议<a href="#to-bsd"><sup>[1]</sup></a>，是一个高性能的key-value数据库。</li><li>Redis特点：<ul><li>支持数据持久化。可将内存中的数据保存在磁盘中，重启时可再次加载使用。</li><li>数据结构存储类型丰富，eg：list,set,zset,hash,string等。</li><li>支持master-slave模式的数据备份。<a id="more"></a>  </li></ul></li></ul><h2 id="Redis优点"><a href="#Redis优点" class="headerlink" title="Redis优点"></a>Redis优点</h2><ul><li>性能高，读写速度快。</li><li>数据类型丰富。支持大多数数据类型的操作，如列表、集合、排序集、散列。</li><li>操作具有原子性。要么成功执行，要么失败都不执行。单个操作是原子性的，多个操作也支持事务原子性。  </li></ul><h2 id="Redis与同类产品作为高速缓存比较"><a href="#Redis与同类产品作为高速缓存比较" class="headerlink" title="Redis与同类产品作为高速缓存比较"></a>Redis与同类产品作为高速缓存比较</h2><p>除了Redis，同样可以作为缓存的有Ehcache、Memcached。</p><ul><li>Ehcache：Java开源项目，引入jar包即可方便的使用。</li><li>Memcached：如果开启多线程模式，读取速度将会有很大提高。数据只会存储于内存中，挂掉后不可恢复。</li><li>Redis：数据结构丰富；支持主从、分片等多种高级特性，用于负载均衡和容灾，具有高可用性。</li></ul><h2 id="Redis安装（Mac版）"><a href="#Redis安装（Mac版）" class="headerlink" title="Redis安装（Mac版）"></a>Redis安装（Mac版）</h2><h3 id="从官网下载稳定版本（Stable）的安装包"><a href="#从官网下载稳定版本（Stable）的安装包" class="headerlink" title="从官网下载稳定版本（Stable）的安装包"></a>从<a href="https://redis.io/download" target="_blank" rel="noopener">官网</a>下载稳定版本（Stable）的安装包</h3><h3 id="将解压包解压到你的指定目录下（我一般将安装包放到-usr-local-tools-下），然后进入到redis解压目录下"><a href="#将解压包解压到你的指定目录下（我一般将安装包放到-usr-local-tools-下），然后进入到redis解压目录下" class="headerlink" title="将解压包解压到你的指定目录下（我一般将安装包放到/usr/local/tools/下），然后进入到redis解压目录下"></a>将解压包解压到你的指定目录下（我一般将安装包放到<code>/usr/local/tools/</code>下），然后进入到redis解压目录下</h3><h3 id="编译测试：sudo-make-test"><a href="#编译测试：sudo-make-test" class="headerlink" title="编译测试：sudo make test"></a>编译测试：<code>sudo make test</code></h3><p>测试报错：<code>[exception]: Executing test client: couldn&#39;t execute &quot;src/redis-benchmark&quot;: no such file or director</code><br><code>make[1]: *** [test] Error 1</code><br><code>make: *** [test] Error 2</code><br>报错不影响安装，可以继续往下执行。<br>（报错问题暂时未解决。<br>试过<br><code>make distclean</code><br><code>make</code><br><code>make test</code><br>无效）</p><h3 id="编译安装：sudo-make-install"><a href="#编译安装：sudo-make-install" class="headerlink" title="编译安装：sudo make install"></a>编译安装：<code>sudo make install</code></h3><h3 id="修改redis-conf中的daemonize，让服务在后台启动"><a href="#修改redis-conf中的daemonize，让服务在后台启动" class="headerlink" title="修改redis.conf中的daemonize，让服务在后台启动."></a>修改redis.conf中的daemonize，让服务在后台启动.</h3><p>输入<code>sudo vi redis.conf</code>进入vi编辑；<br>输入<code>/daemonize</code> 回车，查找daemonize所在位置；<br>修改redis.conf中的daemonize no改成yes；（输入i编辑，编辑完后按esc退出编辑，输入<code>:wq</code>保存编辑并退出。<br><img src="/2018-08/redis-study-1/redis-2.png" alt="Redis picture"></p><h3 id="启动Redis-，测试"><a href="#启动Redis-，测试" class="headerlink" title="启动Redis ，测试"></a>启动Redis ，测试</h3><p><code>sudo redis-server redis.conf</code>：启动redis；<br><code>redis-cli</code>：进入控制台；<br><code>ping</code>：进行连通性测试。<br><img src="/2018-08/redis-study-1/redis-3.jpg" alt="Redis picture"></p><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>输入<code>shutdown</code>关闭redis实例。<br>输入<code>exit</code>退出控制台。</p><p>OK，到此Redis安装就结束啦，有问题可以留言一起讨论哦～</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-install.html</a><br><a href="https://www.yiibai.com/redis/redis_quick_guide.html" target="_blank" rel="noopener">https://www.yiibai.com/redis/redis_quick_guide.html</a><br><a href="https://www.cnblogs.com/yiwangzhibujian/p/7053840.html" target="_blank" rel="noopener">https://www.cnblogs.com/yiwangzhibujian/p/7053840.html</a></p><h2 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h2><ul><li><span id="to-bsd">[1] BSD开源协议：使用者可自由使用、修改源代码，也可将修改后的代码作为开源或者专有软件再发布。BSD鼓励代码共享，但要尊重代码作者的著作权。</span></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018-08/redis-study-1/redis-1.png&quot; alt=&quot;Redis picture&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Redis介绍&quot;&gt;&lt;a href=&quot;#Redis介绍&quot; class=&quot;headerlink&quot; title=&quot;Redis介绍&quot;&gt;&lt;/a&gt;Redis介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Redis是一个开源、高级的键值存储和一个适用的解决方案，用于构建高性能、可扩展的web应用程序，遵循BSD协议&lt;a href=&quot;#to-bsd&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;，是一个高性能的key-value数据库。&lt;/li&gt;
&lt;li&gt;Redis特点：&lt;ul&gt;
&lt;li&gt;支持数据持久化。可将内存中的数据保存在磁盘中，重启时可再次加载使用。&lt;/li&gt;
&lt;li&gt;数据结构存储类型丰富，eg：list,set,zset,hash,string等。&lt;/li&gt;
&lt;li&gt;支持master-slave模式的数据备份。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://zrxjuly.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://zrxjuly.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>GitHub代码查看工具——Sourcegraph插件安装及介绍</title>
    <link href="https://zrxjuly.github.io/2018-08/github-plugin-sourcegraph/"/>
    <id>https://zrxjuly.github.io/2018-08/github-plugin-sourcegraph/</id>
    <published>2018-08-16T09:09:01.000Z</published>
    <updated>2020-02-23T14:23:09.348Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为编程人员，经常会阅读大神们的代码进行学习，像GitHub上有很多好的开源的代码供我们学习，所以呢，问题就来了，一般的方法阅读代码不光费劲，而且项目结构也不容易搞清楚。偶然发现了一个可以很好地查看代码的工具Sourcegraph，觉得很好。</p></blockquote><h2 id="Sourcegraph介绍"><a href="#Sourcegraph介绍" class="headerlink" title="Sourcegraph介绍"></a>Sourcegraph介绍</h2><p>简单地说，Sourcegraph是一个帮助我们更好地阅读和理解代码的工具。<br>推荐下面文章：<br><a href="http://www.linuxidc.com/Linux/2015-04/116750.htm" target="_blank" rel="noopener">Sourcegraph:开发者的福音</a></p><a id="more"></a><h2 id="Sourcegraph插件安装"><a href="#Sourcegraph插件安装" class="headerlink" title="Sourcegraph插件安装"></a>Sourcegraph插件安装</h2><p>解决无法访问Chrome网上应用商店的问题：<br><a href="http://www.xiazaiba.com/jiaocheng/2453.html" target="_blank" rel="noopener">http://www.xiazaiba.com/jiaocheng/2453.html</a><br>1.在chrome网上应用商店中搜索：sourcegraph<br>2.找到Sourcegraph for GitHub，点击添加至CHROME。</p><h2 id="在GitHub上利用Sourcegraph查看阅读代码"><a href="#在GitHub上利用Sourcegraph查看阅读代码" class="headerlink" title="在GitHub上利用Sourcegraph查看阅读代码"></a>在GitHub上利用Sourcegraph查看阅读代码</h2><p>进入GitHub，找一个项目，点开一个文件，在工具栏里会看到多了一个View File的按钮，点击此按钮，如下图：<br><img src="/2018-08/github-plugin-sourcegraph/20171023170516689.png" alt="View File"><br>进入如下页面：<br><img src="/2018-08/github-plugin-sourcegraph/20171023170642235.png" alt="这里写图片描述"></p><p>这样我们就可利用Sourcegraph很方便地查看代码了，是不是很方便，而且项目结构也非常清晰^.^。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作为编程人员，经常会阅读大神们的代码进行学习，像GitHub上有很多好的开源的代码供我们学习，所以呢，问题就来了，一般的方法阅读代码不光费劲，而且项目结构也不容易搞清楚。偶然发现了一个可以很好地查看代码的工具Sourcegraph，觉得很好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Sourcegraph介绍&quot;&gt;&lt;a href=&quot;#Sourcegraph介绍&quot; class=&quot;headerlink&quot; title=&quot;Sourcegraph介绍&quot;&gt;&lt;/a&gt;Sourcegraph介绍&lt;/h2&gt;&lt;p&gt;简单地说，Sourcegraph是一个帮助我们更好地阅读和理解代码的工具。&lt;br&gt;推荐下面文章：&lt;br&gt;&lt;a href=&quot;http://www.linuxidc.com/Linux/2015-04/116750.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sourcegraph:开发者的福音&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="plugin" scheme="https://zrxjuly.github.io/categories/plugin/"/>
    
    
      <category term="plugin" scheme="https://zrxjuly.github.io/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>基于windows平台Git+GitHub+Hexo搭建个人博客（三）</title>
    <link href="https://zrxjuly.github.io/2018-08/blog-build-hexo-3/"/>
    <id>https://zrxjuly.github.io/2018-08/blog-build-hexo-3/</id>
    <published>2018-08-15T08:58:12.000Z</published>
    <updated>2020-02-23T14:23:09.344Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018-08/blog-build-hexo-3/banner.jpg" alt="Hexo banner"><br>&emsp;&emsp;去年的时候使用Hexo搭建了一个博客，当时主题使用的是JackMan，虽说这个theme是挺好看的了，但是自己感觉还少点东西，所以自从搭建好后就一直没用，笔记还是放在CSDN上。前两天偶然发现了一位大神的博客，当时一眼就喜欢上了这个主题，浏览网站后知道大神的博客也是用Hexo搭建的，内心窃喜。于是乎就去NexT官网clone，又根据自己之前写的博客笔记重新美化了自己的博客，大功告成。  </p><p>&emsp;&emsp;下面说一下在美化自己博客的时候遇到的问题及解决方法：</p><a id="more"></a><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>needmoreshare2 开启分享功能后使用微信分享无法生成二维码。</p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>生成二维码的链接失效</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>找到资源目录下的needsharebutton.js文件（themes/next/source/lib/needsharebutton/），打开文件，找到该行代码并注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imgSrc = <span class="string">"https://api.qinco.me/api/qr?size=400&amp;content="</span> + <span class="built_in">encodeURIComponent</span>(myoptions.url);</span><br></pre></td></tr></table></figure><p>复制下面的代码粘贴到刚注释的代码下方：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imgSrc = <span class="string">'https://api.qrserver.com/v1/create-qr-code/?size=150x150&amp;data='</span>+<span class="built_in">encodeURIComponent</span>(myoptions.url);</span><br></pre></td></tr></table></figure><p>重新运行，就OK了。当然，我现在使用的并不是needmoreshare2，而是Addthis，它可以自定义样式，自我感觉要好看一些。</p><h2 id="分享一些搭建博客相关link"><a href="#分享一些搭建博客相关link" class="headerlink" title="分享一些搭建博客相关link"></a>分享一些搭建博客相关link</h2><blockquote><p><a href="https://www.jianshu.com/p/1f8107a8778c" target="_blank" rel="noopener">hexo搭建个人博客详细教程</a><br><a href="https://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener">hexo生成博文插入图片</a><br><a href="https://www.jianshu.com/p/78c218f9d1e7" target="_blank" rel="noopener">hexo设置阅读全文</a><br><a href="https://blog.csdn.net/qw8880000/article/details/80235391" target="_blank" rel="noopener">hexo网站统计</a></p></blockquote><h2 id="博文存储形式及位置修改"><a href="#博文存储形式及位置修改" class="headerlink" title="博文存储形式及位置修改"></a>博文存储形式及位置修改</h2><p>用<code>hexo new 文章名称</code> 命令创建新文件的时候，会默认存放于博客根目录的<code>source/_posts</code>文件夹下，这样博文少了还好，但是多了就不好维护了。我们可以修改博文存放方式，将博文存放在以<code>yyyy-MM</code> 也就是‘年-月’这种格式的文件夹下，以年-月分类，方便维护。下面具体来说配置方法：</p><h3 id="修改博客根目录配置文件-config-yml"><a href="#修改博客根目录配置文件-config-yml" class="headerlink" title="修改博客根目录配置文件_config.yml"></a>修改博客根目录配置文件_config.yml</h3><h4 id="修改new-post-name-参数"><a href="#修改new-post-name-参数" class="headerlink" title="修改new_post_name 参数"></a>修改<em>new_post_name</em> 参数</h4><p>找到<code>new_post_name: :title.md</code> 这里配置新建文件的名称，我们将属性值<code>:title.md</code> 修改为<code>:year-:month/:title.md</code> 也就是在文件名称前面加了一个目录，该目录名称的格式是<code>年-月</code>。所以当我们在执行<code>hexo new 文章名称</code> 的时候，会自动在<code>_post</code>文件夹下再创建一个以<code>年-月</code>为格式的文件夹，新创建的markdown 文件在该文件夹下。</p><blockquote><p>你的文件位置： <code>_post/2018-08/title.md</code>   </p></blockquote><h4 id="修改permalink-参数"><a href="#修改permalink-参数" class="headerlink" title="修改permalink 参数"></a>修改<em>permalink</em> 参数</h4><p>找到<code>permalink: :year/:month/:day/:title/</code> 这是默认的博文访问路径。我们将其属性值修改为<code>:year-:month/:title/</code>。</p><p>按照以上步骤更改完后，可以新建一个post试一下。</p><h2 id="编辑器推荐"><a href="#编辑器推荐" class="headerlink" title="编辑器推荐"></a>编辑器推荐</h2><p>写博客当然少不了好用的编辑器啦。</p><h3 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h3><p>快速、好用、高效！</p><h3 id="HexoEditor"><a href="#HexoEditor" class="headerlink" title="HexoEditor"></a>HexoEditor</h3><p>GitHub上一款开源的MarkDown编辑器。可边编辑边预览。</p><p>至于具体哪个好用，自己试了才会知道。我倾向于st3，主要是因为它可以open folder，感觉更方便一些^.^。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018-08/blog-build-hexo-3/banner.jpg&quot; alt=&quot;Hexo banner&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;去年的时候使用Hexo搭建了一个博客，当时主题使用的是JackMan，虽说这个theme是挺好看的了，但是自己感觉还少点东西，所以自从搭建好后就一直没用，笔记还是放在CSDN上。前两天偶然发现了一位大神的博客，当时一眼就喜欢上了这个主题，浏览网站后知道大神的博客也是用Hexo搭建的，内心窃喜。于是乎就去NexT官网clone，又根据自己之前写的博客笔记重新美化了自己的博客，大功告成。  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;下面说一下在美化自己博客的时候遇到的问题及解决方法：&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zrxjuly.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://zrxjuly.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>基于windows平台Git+GitHub+Hexo搭建个人博客（二）</title>
    <link href="https://zrxjuly.github.io/2017-09/blog-build-hexo-2/"/>
    <id>https://zrxjuly.github.io/2017-09/blog-build-hexo-2/</id>
    <published>2017-09-21T06:55:03.000Z</published>
    <updated>2020-02-23T14:23:09.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客主题设置"><a href="#博客主题设置" class="headerlink" title="博客主题设置"></a>博客主题设置</h2><p>&emsp;&emsp;上一篇中我们已经成功搭建了自己的博客并deploy到远程GitHub上，也有很多炫酷的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题</a>，我们可以将我们自己的博客设置成自己喜欢的主题。<br>在我们本地博客文件夹下，有个名为themes的文件夹，该文件夹就是用来存放各种主题的。Hexo默认的主题是landscape。</p><h3 id="修改主题的步骤"><a href="#修改主题的步骤" class="headerlink" title="修改主题的步骤"></a>修改主题的步骤</h3><ol><li>从网上把我们喜欢的主题下载下来，放到themes文件夹下;</li><li>打开博客根目录下的_config.yml文件，找到theme的配置项，<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: landscape</span><br></pre></td></tr></table></figure></li></ol><p>&emsp;&emsp;将landscape改为自己所换的主题名称，就OK了。<br>本地测试一下是否修改成功，再deploy到远程。</p><h2 id="常用的Hexo命令"><a href="#常用的Hexo命令" class="headerlink" title="常用的Hexo命令"></a>常用的Hexo命令</h2><p>from <a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot;       #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot;  #新建页面</span><br><span class="line">hexo generate             #生成静态页面至public目录</span><br><span class="line">hexo server               #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy               #部署到GitHub</span><br><span class="line">hexo help                 # 查看帮助</span><br><span class="line">hexo version              #查看Hexo的版本</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;博客主题设置&quot;&gt;&lt;a href=&quot;#博客主题设置&quot; class=&quot;headerlink&quot; title=&quot;博客主题设置&quot;&gt;&lt;/a&gt;博客主题设置&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;上一篇中我们已经成功搭建了自己的博客并deploy到远程GitHub上，也有很多炫酷的&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo主题&lt;/a&gt;，我们可以将我们自己的博客设置成自己喜欢的主题。&lt;br&gt;在我们本地博客文件夹下，有个名为themes的文件夹，该文件夹就是用来存放各种主题的。Hexo默认的主题是landscape。&lt;/p&gt;
&lt;h3 id=&quot;修改主题的步骤&quot;&gt;&lt;a href=&quot;#修改主题的步骤&quot; class=&quot;headerlink&quot; title=&quot;修改主题的步骤&quot;&gt;&lt;/a&gt;修改主题的步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;从网上把我们喜欢的主题下载下来，放到themes文件夹下;&lt;/li&gt;
&lt;li&gt;打开博客根目录下的_config.yml文件，找到theme的配置项，&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zrxjuly.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://zrxjuly.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>基于windows平台Git+GitHub+Hexo搭建个人博客（一）</title>
    <link href="https://zrxjuly.github.io/2017-09/blog-build-hexo-1/"/>
    <id>https://zrxjuly.github.io/2017-09/blog-build-hexo-1/</id>
    <published>2017-09-20T05:34:31.000Z</published>
    <updated>2020-02-23T14:23:09.339Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;之前最开始是了解并搭建的jekyll框架，然后又从网上百度了一下，很多博客都支持Hexo，觉得Hexo更好用一些，也有很多支持jekyll的，自己确实不知道是jekyll和Hexo哪个更好用一些，所以又搭建了一下Hexo的环境。<br>我在这里对我自己的操作步骤进行总结了一下，教程也可以参考<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官方文档</a>，写的比较详细。</p><h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h2><p>&emsp;&emsp;简单来说， <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>是一款快速、简易、强大的基于Node.js的静态博客框架，支持Markdown语法。在安装Hexo之前，必须得安装Node.js。  </p><p>下面就介绍一下搭建的步骤。当然，在此之前，您已经申请了GitHub账号以及本地已经安装了Git。</p><a id="more"></a><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>node.js的安装过程可以参考<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">菜鸟教程</a>，步骤很详细。<br>安装完成之后，可以测试一下是否安装成功：打开cmd，输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>出现版本信息则证明安装成功。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Node安装完成后，就开始安装Hexo。<br>在cmd命令行下，输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>回车，安装可能会有些慢，请耐心等待。安装成功后，输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><p>回车，出现版本信息则安装成功。</p><h2 id="创建一个博客"><a href="#创建一个博客" class="headerlink" title="创建一个博客"></a>创建一个博客</h2><p>新建一个文件夹myblog（作为博客项目的名字，可以随便起），我这里建在了E盘。cmd命令进入刚才新建的文件夹下，输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init //初始化博客项目</span><br></pre></td></tr></table></figure><p>回车，初始化过程中也请耐心等待。<br>初始化完成后，输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>回车，myblog文件夹下会生成如下目录：</p><p><img src="/2017-09/blog-build-hexo-1/20170921114606778.png" alt="博客目录"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate //生成静态文件,也可输入 hexo g</span><br></pre></td></tr></table></figure><p>完成后，输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server //启动本地服务，也可输入 hexo s</span><br></pre></td></tr></table></figure><p>默认本地服务的网址为<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，打开浏览器输入网址，如果看到博客首页，则成功。<br><img src="/2017-09/blog-build-hexo-1/20170920131600210.png" alt="blog首页"></p><p>感觉超级超级炫酷！</p><hr><h2 id="上传至GitHub"><a href="#上传至GitHub" class="headerlink" title="上传至GitHub"></a>上传至GitHub</h2><ol><li><p>登录进入到您自己的<a href="https://github.com/" target="_blank" rel="noopener">GitHub网站</a>首页，新建一个版本库（New Repository）</p><p><img src="/2017-09/blog-build-hexo-1/20170921112318924.png" alt="newRepository"><br>版本库的名字需是username.github.io的格式，比如我的用户名是zrxJuly,所以我的版本库名称为zrxJuly.github.io。Description是描述您的版本库的信息的，也可以不写。之后直接点击Create repository就OK了，这样，GitHub上的版本库就创建完成。当时我做的时候，在Setting中还设置了githubpages，一直报错，css样式显示不出来，所以先不要在setting中选择主题了。远程库创建告一段落。</p></li><li><p>下面回到您自己的本地myblog文件夹下，用编辑器打开名为_config.yml的文件，找到deploy配置项，将内容改为：</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span> <span class="comment">#注意 : 后边一定要加空格，下同。 </span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br></pre></td></tr></table></figure><p>代码块第三行repository的地址来源：您刚创建远程库的地址<br><img src="/2017-09/blog-build-hexo-1/20170921115827552.png" alt="repository url"><br>修改完成后，再修改一个地方，还是在_config.yml文件下，找到URL部分，将url和root如下设置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">https://username.github.io</span> </span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>url修改也可参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">Hexo的中文文档</a><br>保存文件并关闭。<br>3. 本地myblog文件夹下，在这里打开GitBash（右键—-&gt;GitBash Here）,输入以下命令回车：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save #不执行此命令无法deploy到远程。</span><br></pre></td></tr></table></figure><p>运行完后，输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g //重新生成静态文件</span><br></pre></td></tr></table></figure><p>回车。基础步骤完成后，将本地创建的博客deploy到远程,发布到GitHub上：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d #也可写为hexo deploy</span><br></pre></td></tr></table></figure><p>完成后，浏览器中输入您刚才设置的url：<code>https://username.github.io</code> 若和本地打开页面一样则成功。<br>&emsp;&emsp;对于大神来说，很快地就会搭完，so easy的。我想说，搭个博客好心酸，不过这样自己一总结感觉好简单，但是中间就是爱出很多问题，比如deploy到远程的时候，本地是没有一点问题的，但是远程css样式就是加载不出来，网上找了很多方法，试了之后，最后终于好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;之前最开始是了解并搭建的jekyll框架，然后又从网上百度了一下，很多博客都支持Hexo，觉得Hexo更好用一些，也有很多支持jekyll的，自己确实不知道是jekyll和Hexo哪个更好用一些，所以又搭建了一下Hexo的环境。&lt;br&gt;我在这里对我自己的操作步骤进行总结了一下，教程也可以参考&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo官方文档&lt;/a&gt;，写的比较详细。&lt;/p&gt;
&lt;h2 id=&quot;什么是Hexo？&quot;&gt;&lt;a href=&quot;#什么是Hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是Hexo？&quot;&gt;&lt;/a&gt;什么是Hexo？&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;简单来说， &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;是一款快速、简易、强大的基于Node.js的静态博客框架，支持Markdown语法。在安装Hexo之前，必须得安装Node.js。  &lt;/p&gt;
&lt;p&gt;下面就介绍一下搭建的步骤。当然，在此之前，您已经申请了GitHub账号以及本地已经安装了Git。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zrxjuly.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://zrxjuly.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
